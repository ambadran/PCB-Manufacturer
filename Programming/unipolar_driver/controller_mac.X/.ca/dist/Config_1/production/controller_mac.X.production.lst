

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Jun 22 02:33:34 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	functab,global,class=ENTRY,delta=2
    38                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x5E,2
    41  0000                     
    42                           ; Version 2.40
    43                           ; Generated 06/12/2021 GMT
    44                           ; 
    45                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC12F675 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0019                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  008C                     	;# 
    96  008E                     	;# 
    97  0090                     	;# 
    98  0095                     	;# 
    99  0096                     	;# 
   100  0096                     	;# 
   101  0099                     	;# 
   102  009A                     	;# 
   103  009A                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  000A                     	;# 
   116  000B                     	;# 
   117  000C                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0019                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  008C                     	;# 
   128  008E                     	;# 
   129  0090                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0096                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009A                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  009F                     	;# 
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0019                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  008C                     	;# 
   160  008E                     	;# 
   161  0090                     	;# 
   162  0095                     	;# 
   163  0096                     	;# 
   164  0096                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009A                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0019                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  008C                     	;# 
   192  008E                     	;# 
   193  0090                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0096                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  0000                     	;# 
   206  0001                     	;# 
   207  0002                     	;# 
   208  0003                     	;# 
   209  0004                     	;# 
   210  0005                     	;# 
   211  000A                     	;# 
   212  000B                     	;# 
   213  000C                     	;# 
   214  000E                     	;# 
   215  000E                     	;# 
   216  000F                     	;# 
   217  0010                     	;# 
   218  0019                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  0081                     	;# 
   222  0085                     	;# 
   223  008C                     	;# 
   224  008E                     	;# 
   225  0090                     	;# 
   226  0095                     	;# 
   227  0096                     	;# 
   228  0096                     	;# 
   229  0099                     	;# 
   230  009A                     	;# 
   231  009A                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  009F                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000E                     	;# 
   247  000E                     	;# 
   248  000F                     	;# 
   249  0010                     	;# 
   250  0019                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  008C                     	;# 
   256  008E                     	;# 
   257  0090                     	;# 
   258  0095                     	;# 
   259  0096                     	;# 
   260  0096                     	;# 
   261  0099                     	;# 
   262  009A                     	;# 
   263  009A                     	;# 
   264  009B                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  000A                     	;# 
   276  000B                     	;# 
   277  000C                     	;# 
   278  000E                     	;# 
   279  000E                     	;# 
   280  000F                     	;# 
   281  0010                     	;# 
   282  0019                     	;# 
   283  001E                     	;# 
   284  001F                     	;# 
   285  0081                     	;# 
   286  0085                     	;# 
   287  008C                     	;# 
   288  008E                     	;# 
   289  0090                     	;# 
   290  0095                     	;# 
   291  0096                     	;# 
   292  0096                     	;# 
   293  0099                     	;# 
   294  009A                     	;# 
   295  009A                     	;# 
   296  009B                     	;# 
   297  009C                     	;# 
   298  009D                     	;# 
   299  009E                     	;# 
   300  009F                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000E                     	;# 
   311  000E                     	;# 
   312  000F                     	;# 
   313  0010                     	;# 
   314  0019                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  0081                     	;# 
   318  0085                     	;# 
   319  008C                     	;# 
   320  008E                     	;# 
   321  0090                     	;# 
   322  0095                     	;# 
   323  0096                     	;# 
   324  0096                     	;# 
   325  0099                     	;# 
   326  009A                     	;# 
   327  009A                     	;# 
   328  009B                     	;# 
   329  009C                     	;# 
   330  009D                     	;# 
   331  009E                     	;# 
   332  009F                     	;# 
   333  0000                     	;# 
   334  0001                     	;# 
   335  0002                     	;# 
   336  0003                     	;# 
   337  0004                     	;# 
   338  0005                     	;# 
   339  000A                     	;# 
   340  000B                     	;# 
   341  000C                     	;# 
   342  000E                     	;# 
   343  000E                     	;# 
   344  000F                     	;# 
   345  0010                     	;# 
   346  0019                     	;# 
   347  001E                     	;# 
   348  001F                     	;# 
   349  0081                     	;# 
   350  0085                     	;# 
   351  008C                     	;# 
   352  008E                     	;# 
   353  0090                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0096                     	;# 
   357  0099                     	;# 
   358  009A                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365                           
   366                           	psect	idataBANK0
   367  0350                     __pidataBANK0:
   368                           
   369                           ;initializer for _func_ptr
   370  0350  3402               	retlw	low (fp__even_pins_set_clear-i1fpbase)
   371  0351  3403               	retlw	low (fp__even_pins_clear_set-i1fpbase)
   372  0352  3401               	retlw	low (fp__odd_pins_set_clear-i1fpbase)
   373  0353  3404               	retlw	low (fp__odd_pins_clear_set-i1fpbase)
   374  0354  3404               	retlw	low (fp__odd_pins_clear_set-i1fpbase)
   375  0355  3401               	retlw	low (fp__odd_pins_set_clear-i1fpbase)
   376  0356  3403               	retlw	low (fp__even_pins_clear_set-i1fpbase)
   377  0357  3402               	retlw	low (fp__even_pins_set_clear-i1fpbase)
   378                           
   379                           ;initializer for _num_steps
   380  0358  34F4               	retlw	244
   381  0359  3401               	retlw	1
   382  035A  340C               	retlw	12
   383  035B  3403               	retlw	3
   384                           
   385                           ;initializer for _target_OF_num
   386  035C  3401               	retlw	1
   387  035D  3400               	retlw	0
   388  000E                     _TMR1	set	14
   389  0010                     _T1CONbits	set	16
   390  0019                     _CMCONbits	set	25
   391  0060                     _TMR1IF	set	96
   392  002B                     _GPIO3	set	43
   393  0080                     _TMR1ON	set	128
   394  0081                     _TMR1CS	set	129
   395  0083                     _T1OSCEN	set	131
   396  0086                     _TMR1GE	set	134
   397  002D                     _GPIO5	set	45
   398  00F8                     _ADON	set	248
   399  002A                     _GPIO2	set	42
   400  0028                     _GPIO0	set	40
   401  002C                     _GPIO4	set	44
   402  0029                     _GPIO1	set	41
   403  005D                     _TMR0IE	set	93
   404  005E                     _PEIE	set	94
   405  005F                     _GIE	set	95
   406  009F                     _ANSELbits	set	159
   407  040B                     _PSA	set	1035
   408  040D                     _T0CS	set	1037
   409  042D                     _TRISIO5	set	1069
   410  042C                     _TRISIO4	set	1068
   411  042A                     _TRISIO2	set	1066
   412  0429                     _TRISIO1	set	1065
   413  0428                     _TRISIO0	set	1064
   414  042B                     _TRISIO3	set	1067
   415  0460                     _TMR1IE	set	1120
   416                           
   417                           	psect	strings
   418  02C5                     __pstrings:
   419  02C5                     stringtab:
   420  02C5                     __stringtab:
   421  02C5                     stringcode:	
   422                           ;	String table - string pointers are 1 byte each
   423                           
   424  02C5                     stringdir:
   425  02C5  3002               	movlw	high stringdir
   426  02C6  008A               	movwf	10
   427  02C7  0804               	movf	4,w
   428  02C8  0A84               	incf	4,f
   429  02C9  0782               	addwf	2,f
   430  02CA                     __stringbase:
   431  02CA  3400               	retlw	0
   432  02CB                     __end_of__stringtab:
   433  02CB                     STR_5:
   434  02CB  3463               	retlw	99	;'c'
   435  02CC  3475               	retlw	117	;'u'
   436  02CD  3472               	retlw	114	;'r'
   437  02CE  3472               	retlw	114	;'r'
   438  02CF  3465               	retlw	101	;'e'
   439  02D0  346E               	retlw	110	;'n'
   440  02D1  3474               	retlw	116	;'t'
   441  02D2  345F               	retlw	95	;'_'
   442  02D3  3470               	retlw	112	;'p'
   443  02D4  346F               	retlw	111	;'o'
   444  02D5  3473               	retlw	115	;'s'
   445  02D6  3469               	retlw	105	;'i'
   446  02D7  3474               	retlw	116	;'t'
   447  02D8  3469               	retlw	105	;'i'
   448  02D9  346F               	retlw	111	;'o'
   449  02DA  346E               	retlw	110	;'n'
   450  02DB  343A               	retlw	58	;':'
   451  02DC  3420               	retlw	32	;' '
   452  02DD  3400               	retlw	0
   453  02DE                     STR_3:
   454  02DE  3474               	retlw	116	;'t'
   455  02DF  3461               	retlw	97	;'a'
   456  02E0  3472               	retlw	114	;'r'
   457  02E1  3467               	retlw	103	;'g'
   458  02E2  3465               	retlw	101	;'e'
   459  02E3  3474               	retlw	116	;'t'
   460  02E4  345F               	retlw	95	;'_'
   461  02E5  344F               	retlw	79	;'O'
   462  02E6  3446               	retlw	70	;'F'
   463  02E7  345F               	retlw	95	;'_'
   464  02E8  346E               	retlw	110	;'n'
   465  02E9  3475               	retlw	117	;'u'
   466  02EA  346D               	retlw	109	;'m'
   467  02EB  343A               	retlw	58	;':'
   468  02EC  3420               	retlw	32	;' '
   469  02ED  3400               	retlw	0
   470  02EE                     STR_1:
   471  02EE  344F               	retlw	79	;'O'
   472  02EF  3446               	retlw	70	;'F'
   473  02F0  345F               	retlw	95	;'_'
   474  02F1  346E               	retlw	110	;'n'
   475  02F2  3475               	retlw	117	;'u'
   476  02F3  346D               	retlw	109	;'m'
   477  02F4  345F               	retlw	95	;'_'
   478  02F5  3454               	retlw	84	;'T'
   479  02F6  344D               	retlw	77	;'M'
   480  02F7  3452               	retlw	82	;'R'
   481  02F8  3431               	retlw	49	;'1'
   482  02F9  343A               	retlw	58	;':'
   483  02FA  3420               	retlw	32	;' '
   484  02FB  3400               	retlw	0
   485  02FC                     STR_2:
   486  02FC  340A               	retlw	10
   487  02FD  3400               	retlw	0
   488  02FC                     
   489                           	psect	cinit
   490  0010                     start_initialization:	
   491                           ; #config settings
   492                           
   493  0010                     __initialization:
   494                           
   495                           ; Initialize objects allocated to BANK0
   496  0010  2350               	fcall	__pidataBANK0	;fetch initializer
   497  0011  00B7               	movwf	__pdataBANK0& (0+127)
   498  0012  2351               	fcall	__pidataBANK0+1	;fetch initializer
   499  0013  00B8               	movwf	(__pdataBANK0+1)& (0+127)
   500  0014  2352               	fcall	__pidataBANK0+2	;fetch initializer
   501  0015  00B9               	movwf	(__pdataBANK0+2)& (0+127)
   502  0016  2353               	fcall	__pidataBANK0+3	;fetch initializer
   503  0017  00BA               	movwf	(__pdataBANK0+3)& (0+127)
   504  0018  2354               	fcall	__pidataBANK0+4	;fetch initializer
   505  0019  00BB               	movwf	(__pdataBANK0+4)& (0+127)
   506  001A  2355               	fcall	__pidataBANK0+5	;fetch initializer
   507  001B  00BC               	movwf	(__pdataBANK0+5)& (0+127)
   508  001C  2356               	fcall	__pidataBANK0+6	;fetch initializer
   509  001D  00BD               	movwf	(__pdataBANK0+6)& (0+127)
   510  001E  2357               	fcall	__pidataBANK0+7	;fetch initializer
   511  001F  00BE               	movwf	(__pdataBANK0+7)& (0+127)
   512  0020  2358               	fcall	__pidataBANK0+8	;fetch initializer
   513  0021  00BF               	movwf	(__pdataBANK0+8)& (0+127)
   514  0022  2359               	fcall	__pidataBANK0+9	;fetch initializer
   515  0023  00C0               	movwf	(__pdataBANK0+9)& (0+127)
   516  0024  235A               	fcall	__pidataBANK0+10	;fetch initializer
   517  0025  00C1               	movwf	(__pdataBANK0+10)& (0+127)
   518  0026  235B               	fcall	__pidataBANK0+11	;fetch initializer
   519  0027  00C2               	movwf	(__pdataBANK0+11)& (0+127)
   520  0028  235C               	fcall	__pidataBANK0+12	;fetch initializer
   521  0029  00C3               	movwf	(__pdataBANK0+12)& (0+127)
   522  002A  235D               	fcall	__pidataBANK0+13	;fetch initializer
   523  002B  00C4               	movwf	(__pdataBANK0+13)& (0+127)
   524                           
   525                           ; Clear objects allocated to BANK0
   526  002C  1383               	bcf	3,7	;select IRP bank0
   527  002D  3045               	movlw	low __pbssBANK0
   528  002E  0084               	movwf	4
   529  002F  3052               	movlw	low (__pbssBANK0+13)
   530  0030  236A               	fcall	clear_ram0
   531  0031                     end_of_initialization:	
   532                           ;End of C runtime variable initialization code
   533                           
   534  0031                     __end_of__initialization:
   535  0031  0183               	clrf	3
   536  0032  2AFE               	ljmp	_main	;jump to C main() function
   537                           
   538                           	psect	bssBANK0
   539  0045                     __pbssBANK0:
   540  0045                     _temp_value:
   541  0045                     	ds	2
   542  0047                     _current_position:
   543  0047                     	ds	2
   544  0049                     _OF_num_TMR1:
   545  0049                     	ds	2
   546  004B                     _first_digit:
   547  004B                     	ds	1
   548  004C                     _second_digit:
   549  004C                     	ds	1
   550  004D                     _third_digit:
   551  004D                     	ds	1
   552  004E                     _tmp_set_clear_sequence:
   553  004E                     	ds	1
   554  004F                     _set_clear_sequence:
   555  004F                     	ds	1
   556  0050                     _pair_select:
   557  0050                     	ds	1
   558  0051                     _CW_CCW_select:
   559  0051                     	ds	1
   560                           
   561                           	psect	dataBANK0
   562  0037                     __pdataBANK0:
   563  0037                     _func_ptr:
   564  0037                     	ds	8
   565  003F                     _num_steps:
   566  003F                     	ds	4
   567  0043                     _target_OF_num:
   568  0043                     	ds	2
   569                           
   570                           	psect	clrtext
   571  036A                     clear_ram0:	
   572                           ;	Called with FSR containing the base address, and
   573                           ;	W with the last address+1
   574                           
   575  036A  0064               	clrwdt	;clear the watchdog before getting into this loop
   576  036B                     clrloop0:
   577  036B  0180               	clrf	0	;clear RAM location pointed to by FSR
   578  036C  0A84               	incf	4,f	;increment pointer
   579  036D  0604               	xorwf	4,w	;XOR with final address
   580  036E  1903               	btfsc	3,2	;have we reached the end yet?
   581  036F  3400               	retlw	0	;all done for this memory range, return
   582  0370  0604               	xorwf	4,w	;XOR again to restore value
   583  0371  2B6B               	goto	clrloop0	;do the next byte
   584                           
   585                           	psect	cstackCOMMON
   586  0000                     __pcstackCOMMON:
   587  0000                     ??_even_pins_set_clear:
   588  0000                     ??_even_pins_clear_set:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0000                     ??_odd_pins_set_clear:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0000                     ??_odd_pins_clear_set:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0000                     ??_update_current_position:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0000                     ??_interrupt_init:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0000                     ??_coil_init:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0000                     ??_reset_all_pins:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0000                     ??_adc_deinit:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0000                     ??_comparator_deinit:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0000                     ??_intToASCII:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0000                     ??_soft_uart_init:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0000                     ??_TMR1_init:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0000                     ??_retrieve_current_position:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0000                     ??i1_reset_all_pins:	
   628                           ; 1 bytes @ 0x0
   629                           
   630                           
   631                           	psect	cstackBANK0
   632  0020                     __pcstackBANK0:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0020                     ?_even_pins_set_clear:
   636  0020                     ?_even_pins_clear_set:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0020                     ?_odd_pins_set_clear:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0020                     ?_odd_pins_clear_set:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0020                     ?_interrupt_init:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0020                     ?_coil_init:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0020                     ?_reset_all_pins:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0020                     ?_adc_deinit:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0020                     ?_comparator_deinit:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0020                     ?_intToASCII:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0020                     ?_soft_uart_init:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0020                     ?_soft_uart_send_uint8_t:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0020                     ?_soft_uart_send_string:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0020                     ?_soft_uart_send_ALL:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0020                     ?_TMR1_init:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0020                     ?_start_timer:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0020                     ?_retrieve_current_position:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0020                     ?_TMR1_ISR:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0020                     ??_TMR1_ISR:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0020                     ?_main:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0020                     ?_ISR:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0020                     ?i1_reset_all_pins:	
   697                           ; 1 bytes @ 0x0
   698                           
   699                           
   700                           ; 1 bytes @ 0x0
   701  0020                     	ds	5
   702  0025                     ??_ISR:
   703                           
   704                           ; 1 bytes @ 0x5
   705  0025                     	ds	4
   706  0029                     ?_update_current_position:
   707  0029                     ??_soft_uart_send_uint8_t:	
   708                           ; 1 bytes @ 0x9
   709                           
   710  0029                     ?_divu10:	
   711                           ; 1 bytes @ 0x9
   712                           
   713  0029                     ?___awmod:	
   714                           ; 2 bytes @ 0x9
   715                           
   716  0029                     intToASCII@num:	
   717                           ; 2 bytes @ 0x9
   718                           
   719  0029                     divu10@n:	
   720                           ; 1 bytes @ 0x9
   721                           
   722  0029                     update_current_position@value:	
   723                           ; 2 bytes @ 0x9
   724                           
   725  0029                     ___awmod@divisor:	
   726                           ; 2 bytes @ 0x9
   727                           
   728                           
   729                           ; 2 bytes @ 0x9
   730  0029                     	ds	1
   731  002A                     soft_uart_send_uint8_t@value:
   732                           
   733                           ; 1 bytes @ 0xA
   734  002A                     	ds	1
   735  002B                     ??_divu10:
   736  002B                     ??_start_timer:	
   737                           ; 1 bytes @ 0xB
   738                           
   739  002B                     soft_uart_send_uint8_t@i:	
   740                           ; 1 bytes @ 0xB
   741                           
   742  002B                     ___awmod@dividend:	
   743                           ; 1 bytes @ 0xB
   744                           
   745                           
   746                           ; 2 bytes @ 0xB
   747  002B                     	ds	1
   748  002C                     ??_soft_uart_send_string:
   749                           
   750                           ; 1 bytes @ 0xC
   751  002C                     	ds	1
   752  002D                     ??___awmod:
   753  002D                     soft_uart_send_string@i:	
   754                           ; 1 bytes @ 0xD
   755                           
   756                           
   757                           ; 1 bytes @ 0xD
   758  002D                     	ds	1
   759  002E                     soft_uart_send_string@string:
   760  002E                     ___awmod@counter:	
   761                           ; 1 bytes @ 0xE
   762                           
   763                           
   764                           ; 1 bytes @ 0xE
   765  002E                     	ds	1
   766  002F                     ___awmod@sign:
   767  002F                     divu10@r:	
   768                           ; 1 bytes @ 0xF
   769                           
   770                           
   771                           ; 2 bytes @ 0xF
   772  002F                     	ds	2
   773  0031                     divu10@q:
   774                           
   775                           ; 2 bytes @ 0x11
   776  0031                     	ds	2
   777  0033                     ??_soft_uart_send_ALL:
   778                           
   779                           ; 1 bytes @ 0x13
   780  0033                     	ds	1
   781  0034                     ??_main:
   782                           
   783                           ; 1 bytes @ 0x14
   784  0034                     	ds	3
   785                           
   786                           	psect	maintext
   787  02FE                     __pmaintext:	
   788 ;;
   789 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   790 ;;
   791 ;; *************** function _main *****************
   792 ;; Defined at:
   793 ;;		line 11 in file "main.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : B00/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMMON   BANK0
   807 ;;      Params:         0       0
   808 ;;      Locals:         0       0
   809 ;;      Temps:          0       3
   810 ;;      Totals:         0       3
   811 ;;Total ram usage:        3 bytes
   812 ;; Hardware stack levels required when called: 6
   813 ;; This function calls:
   814 ;;		_TMR1_init
   815 ;;		_adc_deinit
   816 ;;		_coil_init
   817 ;;		_comparator_deinit
   818 ;;		_interrupt_init
   819 ;;		_reset_all_pins
   820 ;;		_retrieve_current_position
   821 ;;		_soft_uart_init
   822 ;;		_soft_uart_send_ALL
   823 ;;		_start_timer
   824 ;; This function is called by:
   825 ;;		Startup code after reset
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829  02FE                     _main:	
   830                           ;psect for function _main
   831                           
   832                           
   833                           ;main.c: 14:     coil_init();
   834                           
   835                           ;incstack = 0
   836                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   837  02FE  2372               	fcall	_coil_init
   838                           
   839                           ;main.c: 15:     comparator_deinit();
   840  02FF  23A5               	fcall	_comparator_deinit
   841                           
   842                           ;main.c: 16:     interrupt_init();
   843  0300  2385               	fcall	_interrupt_init
   844                           
   845                           ;main.c: 17:     TMR1_init();
   846  0301  235E               	fcall	_TMR1_init
   847                           
   848                           ;main.c: 18:     adc_deinit();
   849  0302  238B               	fcall	_adc_deinit
   850                           
   851                           ;main.c: 20:     soft_uart_init();
   852  0303  239C               	fcall	_soft_uart_init
   853                           
   854                           ;main.c: 24:     reset_all_pins();
   855  0304  237F               	fcall	_reset_all_pins
   856                           
   857                           ;main.c: 27:     _delay((unsigned long)((2000)*(4000000/4000.0)));
   858  0305  300B               	movlw	11
   859  0306  1283               	bcf	3,5	;RP0=0, select bank0
   860  0307  00B6               	movwf	??_main+2
   861  0308  3026               	movlw	38
   862  0309  00B5               	movwf	??_main+1
   863  030A  305D               	movlw	93
   864  030B  00B4               	movwf	??_main
   865  030C                     u557:
   866  030C  0BB4               	decfsz	??_main,f
   867  030D  2B0C               	goto	u557
   868  030E  0BB5               	decfsz	??_main+1,f
   869  030F  2B0C               	goto	u557
   870  0310  0BB6               	decfsz	??_main+2,f
   871  0311  2B0C               	goto	u557
   872  0312  2B13               	nop2
   873                           
   874                           ;main.c: 28:     retrieve_current_position();
   875  0313  23A1               	fcall	_retrieve_current_position
   876  0314                     l1457:
   877                           
   878                           ;main.c: 33:         if(GPIO3 != CW_CCW_select) {
   879  0314  3000               	movlw	0
   880  0315  1283               	bcf	3,5	;RP0=0, select bank0
   881  0316  1985               	btfsc	5,3	;volatile
   882  0317  3001               	movlw	1
   883  0318  0651               	xorwf	_CW_CCW_select,w
   884  0319  1903               	skipnz
   885  031A  2B20               	goto	l1463
   886                           
   887                           ;main.c: 34:             CW_CCW_select = GPIO3;
   888  031B  3000               	movlw	0
   889  031C  1985               	btfsc	5,3	;volatile
   890  031D  3001               	movlw	1
   891  031E  00D1               	movwf	_CW_CCW_select
   892                           
   893                           ;main.c: 35:             start_timer();
   894  031F  228A               	fcall	_start_timer
   895  0320                     l1463:
   896                           
   897                           ;main.c: 40:         soft_uart_send_ALL();
   898  0320  203E               	fcall	_soft_uart_send_ALL
   899                           
   900                           ;main.c: 42:         _delay((unsigned long)((10)*(4000000/4000.0)));
   901  0321  300D               	movlw	13
   902  0322  1283               	bcf	3,5	;RP0=0, select bank0
   903  0323  00B5               	movwf	??_main+1
   904  0324  30FB               	movlw	251
   905  0325  00B4               	movwf	??_main
   906  0326                     u567:
   907  0326  0BB4               	decfsz	??_main,f
   908  0327  2B26               	goto	u567
   909  0328  0BB5               	decfsz	??_main+1,f
   910  0329  2B26               	goto	u567
   911  032A  2B2B               	nop2
   912  032B  2B14               	goto	l1457
   913  032C                     __end_of_main:
   914                           
   915                           	psect	text1
   916  028A                     __ptext1:	
   917 ;; *************** function _start_timer *****************
   918 ;; Defined at:
   919 ;;		line 14 in file "tmr1_module.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;		None
   922 ;; Auto vars:     Size  Location     Type
   923 ;;		None
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0, pclath, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0
   933 ;;      Params:         0       0
   934 ;;      Locals:         0       0
   935 ;;      Temps:          0       1
   936 ;;      Totals:         0       1
   937 ;;Total ram usage:        1 bytes
   938 ;; Hardware stack levels used: 1
   939 ;; Hardware stack levels required when called: 4
   940 ;; This function calls:
   941 ;;		_update_current_position
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947  028A                     _start_timer:	
   948                           ;psect for function _start_timer
   949                           
   950                           
   951                           ;tmr1_module.c: 16:     if (CW_CCW_select) {
   952                           
   953                           ;incstack = 0
   954                           ; Regs used in _start_timer: [wreg+status,2+status,0+pclath+cstack]
   955  028A  1283               	bcf	3,5	;RP0=0, select bank0
   956  028B  0851               	movf	_CW_CCW_select,w
   957  028C  1903               	btfsc	3,2
   958  028D  2AA1               	goto	l1413
   959                           
   960                           ;tmr1_module.c: 18:         update_current_position(current_position - OF_num_TMR1);
   961  028E  0849               	movf	_OF_num_TMR1,w
   962  028F  0247               	subwf	_current_position,w
   963  0290  00A9               	movwf	update_current_position@value
   964  0291  084A               	movf	_OF_num_TMR1+1,w
   965  0292  1C03               	skipc
   966  0293  0A4A               	incf	_OF_num_TMR1+1,w
   967  0294  0248               	subwf	_current_position+1,w
   968  0295  00AA               	movwf	update_current_position@value+1
   969  0296  2379               	fcall	_update_current_position
   970                           
   971                           ;tmr1_module.c: 24:         target_OF_num = num_steps[1] - current_position;
   972  0297  1283               	bcf	3,5	;RP0=0, select bank0
   973  0298  0847               	movf	_current_position,w
   974  0299  0241               	subwf	_num_steps+2,w
   975  029A  00C3               	movwf	_target_OF_num
   976  029B  0848               	movf	_current_position+1,w
   977  029C  1C03               	skipc
   978  029D  0A48               	incf	_current_position+1,w
   979  029E  0242               	subwf	_num_steps+3,w
   980  029F  00C4               	movwf	_target_OF_num+1
   981                           
   982                           ;tmr1_module.c: 27:     } else {
   983  02A0  2AC1               	goto	l1421
   984  02A1                     l1413:
   985                           
   986                           ;tmr1_module.c: 29:         update_current_position(current_position + OF_num_TMR1);
   987  02A1  0849               	movf	_OF_num_TMR1,w
   988  02A2  0747               	addwf	_current_position,w
   989  02A3  00A9               	movwf	update_current_position@value
   990  02A4  084A               	movf	_OF_num_TMR1+1,w
   991  02A5  1803               	skipnc
   992  02A6  0A4A               	incf	_OF_num_TMR1+1,w
   993  02A7  0748               	addwf	_current_position+1,w
   994  02A8  00AA               	movwf	update_current_position@value+1
   995  02A9  2379               	fcall	_update_current_position
   996                           
   997                           ;tmr1_module.c: 35:         if (current_position > num_steps[0]) {
   998  02AA  1283               	bcf	3,5	;RP0=0, select bank0
   999  02AB  0840               	movf	_num_steps+1,w
  1000  02AC  3A80               	xorlw	128
  1001  02AD  00AB               	movwf	??_start_timer
  1002  02AE  0848               	movf	_current_position+1,w
  1003  02AF  3A80               	xorlw	128
  1004  02B0  022B               	subwf	??_start_timer,w
  1005  02B1  1D03               	skipz
  1006  02B2  2AB5               	goto	u465
  1007  02B3  0847               	movf	_current_position,w
  1008  02B4  023F               	subwf	_num_steps,w
  1009  02B5                     u465:
  1010  02B5  1803               	skipnc
  1011  02B6  2ABC               	goto	l1419
  1012                           
  1013                           ;tmr1_module.c: 36:             target_OF_num = num_steps[0];
  1014  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  1015  02B8  0840               	movf	_num_steps+1,w
  1016  02B9  00C4               	movwf	_target_OF_num+1
  1017  02BA  083F               	movf	_num_steps,w
  1018  02BB  2AC0               	goto	L1
  1019  02BC                     l1419:	
  1020                           ;tmr1_module.c: 37:         } else {
  1021                           
  1022                           
  1023                           ;tmr1_module.c: 38:             target_OF_num = current_position;
  1024  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  1025  02BD  0848               	movf	_current_position+1,w
  1026  02BE  00C4               	movwf	_target_OF_num+1
  1027  02BF  0847               	movf	_current_position,w
  1028  02C0                     L1:
  1029  02C0  00C3               	movwf	_target_OF_num
  1030  02C1                     l1421:
  1031                           
  1032                           ;tmr1_module.c: 44:     OF_num_TMR1 = 0;
  1033  02C1  01C9               	clrf	_OF_num_TMR1
  1034  02C2  01CA               	clrf	_OF_num_TMR1+1
  1035                           
  1036                           ;tmr1_module.c: 47:     TMR1ON = 1;
  1037  02C3  1410               	bsf	16,0	;volatile
  1038  02C4  0008               	return
  1039  02C5                     __end_of_start_timer:
  1040                           
  1041                           	psect	text2
  1042  0379                     __ptext2:	
  1043 ;; *************** function _update_current_position *****************
  1044 ;; Defined at:
  1045 ;;		line 59 in file "tmr1_module.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  value           2    9[BANK0 ] int 
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;		None
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  1    wreg      void 
  1052 ;; Registers used:
  1053 ;;		wreg
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMMON   BANK0
  1059 ;;      Params:         0       2
  1060 ;;      Locals:         0       0
  1061 ;;      Temps:          0       0
  1062 ;;      Totals:         0       2
  1063 ;;Total ram usage:        2 bytes
  1064 ;; Hardware stack levels used: 1
  1065 ;; Hardware stack levels required when called: 3
  1066 ;; This function calls:
  1067 ;;		Nothing
  1068 ;; This function is called by:
  1069 ;;		_start_timer
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073  0379                     _update_current_position:	
  1074                           ;psect for function _update_current_position
  1075                           
  1076                           
  1077                           ;tmr1_module.c: 61:     current_position = value;
  1078                           
  1079                           ;incstack = 0
  1080                           ; Regs used in _update_current_position: [wreg]
  1081  0379  1283               	bcf	3,5	;RP0=0, select bank0
  1082  037A  082A               	movf	update_current_position@value+1,w
  1083  037B  00C8               	movwf	_current_position+1
  1084  037C  0829               	movf	update_current_position@value,w
  1085  037D  00C7               	movwf	_current_position
  1086  037E  0008               	return
  1087  037F                     __end_of_update_current_position:
  1088                           
  1089                           	psect	text3
  1090  003E                     __ptext3:	
  1091 ;; *************** function _soft_uart_send_ALL *****************
  1092 ;; Defined at:
  1093 ;;		line 61 in file "software_uart.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;		None
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;		None
  1098 ;; Return value:  Size  Location     Type
  1099 ;;                  1    wreg      void 
  1100 ;; Registers used:
  1101 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMMON   BANK0
  1107 ;;      Params:         0       0
  1108 ;;      Locals:         0       0
  1109 ;;      Temps:          0       1
  1110 ;;      Totals:         0       1
  1111 ;;Total ram usage:        1 bytes
  1112 ;; Hardware stack levels used: 1
  1113 ;; Hardware stack levels required when called: 5
  1114 ;; This function calls:
  1115 ;;		___awmod
  1116 ;;		_divu10
  1117 ;;		_intToASCII
  1118 ;;		_soft_uart_send_string
  1119 ;;		_soft_uart_send_uint8_t
  1120 ;; This function is called by:
  1121 ;;		_main
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125  003E                     _soft_uart_send_ALL:	
  1126                           ;psect for function _soft_uart_send_ALL
  1127                           
  1128                           
  1129                           ;software_uart.c: 67:     temp_value = OF_num_TMR1;
  1130                           
  1131                           ;incstack = 0
  1132                           ; Regs used in _soft_uart_send_ALL: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1133  003E  1283               	bcf	3,5	;RP0=0, select bank0
  1134  003F  084A               	movf	_OF_num_TMR1+1,w
  1135  0040  00C6               	movwf	_temp_value+1
  1136  0041  0849               	movf	_OF_num_TMR1,w
  1137  0042  00C5               	movwf	_temp_value
  1138                           
  1139                           ;software_uart.c: 69:     third_digit = intToASCII(temp_value%10);
  1140  0043  300A               	movlw	10
  1141  0044  00A9               	movwf	___awmod@divisor
  1142  0045  3000               	movlw	0
  1143  0046  00AA               	movwf	___awmod@divisor+1
  1144  0047  0846               	movf	_temp_value+1,w
  1145  0048  00AC               	movwf	___awmod@dividend+1
  1146  0049  0845               	movf	_temp_value,w
  1147  004A  00AB               	movwf	___awmod@dividend
  1148  004B  21BC               	fcall	___awmod
  1149  004C  1283               	bcf	3,5	;RP0=0, select bank0
  1150  004D  0829               	movf	?___awmod,w
  1151  004E  2397               	fcall	_intToASCII
  1152  004F  1283               	bcf	3,5	;RP0=0, select bank0
  1153  0050  00B3               	movwf	??_soft_uart_send_ALL
  1154  0051  0833               	movf	??_soft_uart_send_ALL,w
  1155  0052  00CD               	movwf	_third_digit
  1156                           
  1157                           ;software_uart.c: 70:     temp_value = divu10(temp_value);
  1158  0053  0846               	movf	_temp_value+1,w
  1159  0054  00AA               	movwf	divu10@n+1
  1160  0055  0845               	movf	_temp_value,w
  1161  0056  00A9               	movwf	divu10@n
  1162  0057  2141               	fcall	_divu10
  1163  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1164  0059  082A               	movf	?_divu10+1,w
  1165  005A  00C6               	movwf	_temp_value+1
  1166  005B  0829               	movf	?_divu10,w
  1167  005C  00C5               	movwf	_temp_value
  1168                           
  1169                           ;software_uart.c: 71:     second_digit = intToASCII(temp_value%10);
  1170  005D  300A               	movlw	10
  1171  005E  00A9               	movwf	___awmod@divisor
  1172  005F  3000               	movlw	0
  1173  0060  00AA               	movwf	___awmod@divisor+1
  1174  0061  0846               	movf	_temp_value+1,w
  1175  0062  00AC               	movwf	___awmod@dividend+1
  1176  0063  0845               	movf	_temp_value,w
  1177  0064  00AB               	movwf	___awmod@dividend
  1178  0065  21BC               	fcall	___awmod
  1179  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1180  0067  0829               	movf	?___awmod,w
  1181  0068  2397               	fcall	_intToASCII
  1182  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1183  006A  00B3               	movwf	??_soft_uart_send_ALL
  1184  006B  0833               	movf	??_soft_uart_send_ALL,w
  1185  006C  00CC               	movwf	_second_digit
  1186                           
  1187                           ;software_uart.c: 72:     temp_value = divu10(temp_value);
  1188  006D  0846               	movf	_temp_value+1,w
  1189  006E  00AA               	movwf	divu10@n+1
  1190  006F  0845               	movf	_temp_value,w
  1191  0070  00A9               	movwf	divu10@n
  1192  0071  2141               	fcall	_divu10
  1193  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1194  0073  082A               	movf	?_divu10+1,w
  1195  0074  00C6               	movwf	_temp_value+1
  1196  0075  0829               	movf	?_divu10,w
  1197  0076  00C5               	movwf	_temp_value
  1198                           
  1199                           ;software_uart.c: 73:     first_digit = intToASCII(temp_value%10);
  1200  0077  300A               	movlw	10
  1201  0078  00A9               	movwf	___awmod@divisor
  1202  0079  3000               	movlw	0
  1203  007A  00AA               	movwf	___awmod@divisor+1
  1204  007B  0846               	movf	_temp_value+1,w
  1205  007C  00AC               	movwf	___awmod@dividend+1
  1206  007D  0845               	movf	_temp_value,w
  1207  007E  00AB               	movwf	___awmod@dividend
  1208  007F  21BC               	fcall	___awmod
  1209  0080  1283               	bcf	3,5	;RP0=0, select bank0
  1210  0081  0829               	movf	?___awmod,w
  1211  0082  2397               	fcall	_intToASCII
  1212  0083  1283               	bcf	3,5	;RP0=0, select bank0
  1213  0084  00B3               	movwf	??_soft_uart_send_ALL
  1214  0085  0833               	movf	??_soft_uart_send_ALL,w
  1215  0086  00CB               	movwf	_first_digit
  1216                           
  1217                           ;software_uart.c: 75:     soft_uart_send_string("OF_num_TMR1: ");
  1218  0087  3024               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1219  0088  232C               	fcall	_soft_uart_send_string
  1220                           
  1221                           ;software_uart.c: 76:     soft_uart_send_uint8_t(first_digit);
  1222  0089  1283               	bcf	3,5	;RP0=0, select bank0
  1223  008A  084B               	movf	_first_digit,w
  1224  008B  224D               	fcall	_soft_uart_send_uint8_t
  1225                           
  1226                           ;software_uart.c: 77:     soft_uart_send_uint8_t(second_digit);
  1227  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1228  008D  084C               	movf	_second_digit,w
  1229  008E  224D               	fcall	_soft_uart_send_uint8_t
  1230                           
  1231                           ;software_uart.c: 78:     soft_uart_send_uint8_t(third_digit);
  1232  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1233  0090  084D               	movf	_third_digit,w
  1234  0091  224D               	fcall	_soft_uart_send_uint8_t
  1235                           
  1236                           ;software_uart.c: 79:     soft_uart_send_string("\n");
  1237  0092  3032               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1238  0093  232C               	fcall	_soft_uart_send_string
  1239                           
  1240                           ;software_uart.c: 81:     temp_value = target_OF_num;
  1241  0094  1283               	bcf	3,5	;RP0=0, select bank0
  1242  0095  0844               	movf	_target_OF_num+1,w
  1243  0096  00C6               	movwf	_temp_value+1
  1244  0097  0843               	movf	_target_OF_num,w
  1245  0098  00C5               	movwf	_temp_value
  1246                           
  1247                           ;software_uart.c: 83:     third_digit = intToASCII(temp_value%10);
  1248  0099  300A               	movlw	10
  1249  009A  00A9               	movwf	___awmod@divisor
  1250  009B  3000               	movlw	0
  1251  009C  00AA               	movwf	___awmod@divisor+1
  1252  009D  0846               	movf	_temp_value+1,w
  1253  009E  00AC               	movwf	___awmod@dividend+1
  1254  009F  0845               	movf	_temp_value,w
  1255  00A0  00AB               	movwf	___awmod@dividend
  1256  00A1  21BC               	fcall	___awmod
  1257  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  1258  00A3  0829               	movf	?___awmod,w
  1259  00A4  2397               	fcall	_intToASCII
  1260  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1261  00A6  00B3               	movwf	??_soft_uart_send_ALL
  1262  00A7  0833               	movf	??_soft_uart_send_ALL,w
  1263  00A8  00CD               	movwf	_third_digit
  1264                           
  1265                           ;software_uart.c: 84:     temp_value = divu10(temp_value);
  1266  00A9  0846               	movf	_temp_value+1,w
  1267  00AA  00AA               	movwf	divu10@n+1
  1268  00AB  0845               	movf	_temp_value,w
  1269  00AC  00A9               	movwf	divu10@n
  1270  00AD  2141               	fcall	_divu10
  1271  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1272  00AF  082A               	movf	?_divu10+1,w
  1273  00B0  00C6               	movwf	_temp_value+1
  1274  00B1  0829               	movf	?_divu10,w
  1275  00B2  00C5               	movwf	_temp_value
  1276                           
  1277                           ;software_uart.c: 85:     second_digit = intToASCII(temp_value%10);
  1278  00B3  300A               	movlw	10
  1279  00B4  00A9               	movwf	___awmod@divisor
  1280  00B5  3000               	movlw	0
  1281  00B6  00AA               	movwf	___awmod@divisor+1
  1282  00B7  0846               	movf	_temp_value+1,w
  1283  00B8  00AC               	movwf	___awmod@dividend+1
  1284  00B9  0845               	movf	_temp_value,w
  1285  00BA  00AB               	movwf	___awmod@dividend
  1286  00BB  21BC               	fcall	___awmod
  1287  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  1288  00BD  0829               	movf	?___awmod,w
  1289  00BE  2397               	fcall	_intToASCII
  1290  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  1291  00C0  00B3               	movwf	??_soft_uart_send_ALL
  1292  00C1  0833               	movf	??_soft_uart_send_ALL,w
  1293  00C2  00CC               	movwf	_second_digit
  1294                           
  1295                           ;software_uart.c: 86:     temp_value = divu10(temp_value);
  1296  00C3  0846               	movf	_temp_value+1,w
  1297  00C4  00AA               	movwf	divu10@n+1
  1298  00C5  0845               	movf	_temp_value,w
  1299  00C6  00A9               	movwf	divu10@n
  1300  00C7  2141               	fcall	_divu10
  1301  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  1302  00C9  082A               	movf	?_divu10+1,w
  1303  00CA  00C6               	movwf	_temp_value+1
  1304  00CB  0829               	movf	?_divu10,w
  1305  00CC  00C5               	movwf	_temp_value
  1306                           
  1307                           ;software_uart.c: 87:     first_digit = intToASCII(temp_value%10);
  1308  00CD  300A               	movlw	10
  1309  00CE  00A9               	movwf	___awmod@divisor
  1310  00CF  3000               	movlw	0
  1311  00D0  00AA               	movwf	___awmod@divisor+1
  1312  00D1  0846               	movf	_temp_value+1,w
  1313  00D2  00AC               	movwf	___awmod@dividend+1
  1314  00D3  0845               	movf	_temp_value,w
  1315  00D4  00AB               	movwf	___awmod@dividend
  1316  00D5  21BC               	fcall	___awmod
  1317  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  1318  00D7  0829               	movf	?___awmod,w
  1319  00D8  2397               	fcall	_intToASCII
  1320  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1321  00DA  00B3               	movwf	??_soft_uart_send_ALL
  1322  00DB  0833               	movf	??_soft_uart_send_ALL,w
  1323  00DC  00CB               	movwf	_first_digit
  1324                           
  1325                           ;software_uart.c: 89:     soft_uart_send_string("target_OF_num: ");
  1326  00DD  3014               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1327  00DE  232C               	fcall	_soft_uart_send_string
  1328                           
  1329                           ;software_uart.c: 90:     soft_uart_send_uint8_t(first_digit);
  1330  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  1331  00E0  084B               	movf	_first_digit,w
  1332  00E1  224D               	fcall	_soft_uart_send_uint8_t
  1333                           
  1334                           ;software_uart.c: 91:     soft_uart_send_uint8_t(second_digit);
  1335  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1336  00E3  084C               	movf	_second_digit,w
  1337  00E4  224D               	fcall	_soft_uart_send_uint8_t
  1338                           
  1339                           ;software_uart.c: 92:     soft_uart_send_uint8_t(third_digit);
  1340  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1341  00E6  084D               	movf	_third_digit,w
  1342  00E7  224D               	fcall	_soft_uart_send_uint8_t
  1343                           
  1344                           ;software_uart.c: 93:     soft_uart_send_string("\n");
  1345  00E8  3032               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1346  00E9  232C               	fcall	_soft_uart_send_string
  1347                           
  1348                           ;software_uart.c: 95:     temp_value = current_position;
  1349  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1350  00EB  0848               	movf	_current_position+1,w
  1351  00EC  00C6               	movwf	_temp_value+1
  1352  00ED  0847               	movf	_current_position,w
  1353  00EE  00C5               	movwf	_temp_value
  1354                           
  1355                           ;software_uart.c: 97:     third_digit = intToASCII(temp_value%10);
  1356  00EF  300A               	movlw	10
  1357  00F0  00A9               	movwf	___awmod@divisor
  1358  00F1  3000               	movlw	0
  1359  00F2  00AA               	movwf	___awmod@divisor+1
  1360  00F3  0846               	movf	_temp_value+1,w
  1361  00F4  00AC               	movwf	___awmod@dividend+1
  1362  00F5  0845               	movf	_temp_value,w
  1363  00F6  00AB               	movwf	___awmod@dividend
  1364  00F7  21BC               	fcall	___awmod
  1365  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  1366  00F9  0829               	movf	?___awmod,w
  1367  00FA  2397               	fcall	_intToASCII
  1368  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1369  00FC  00B3               	movwf	??_soft_uart_send_ALL
  1370  00FD  0833               	movf	??_soft_uart_send_ALL,w
  1371  00FE  00CD               	movwf	_third_digit
  1372                           
  1373                           ;software_uart.c: 98:     temp_value = divu10(temp_value);
  1374  00FF  0846               	movf	_temp_value+1,w
  1375  0100  00AA               	movwf	divu10@n+1
  1376  0101  0845               	movf	_temp_value,w
  1377  0102  00A9               	movwf	divu10@n
  1378  0103  2141               	fcall	_divu10
  1379  0104  1283               	bcf	3,5	;RP0=0, select bank0
  1380  0105  082A               	movf	?_divu10+1,w
  1381  0106  00C6               	movwf	_temp_value+1
  1382  0107  0829               	movf	?_divu10,w
  1383  0108  00C5               	movwf	_temp_value
  1384                           
  1385                           ;software_uart.c: 99:     second_digit = intToASCII(temp_value%10);
  1386  0109  300A               	movlw	10
  1387  010A  00A9               	movwf	___awmod@divisor
  1388  010B  3000               	movlw	0
  1389  010C  00AA               	movwf	___awmod@divisor+1
  1390  010D  0846               	movf	_temp_value+1,w
  1391  010E  00AC               	movwf	___awmod@dividend+1
  1392  010F  0845               	movf	_temp_value,w
  1393  0110  00AB               	movwf	___awmod@dividend
  1394  0111  21BC               	fcall	___awmod
  1395  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1396  0113  0829               	movf	?___awmod,w
  1397  0114  2397               	fcall	_intToASCII
  1398  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1399  0116  00B3               	movwf	??_soft_uart_send_ALL
  1400  0117  0833               	movf	??_soft_uart_send_ALL,w
  1401  0118  00CC               	movwf	_second_digit
  1402                           
  1403                           ;software_uart.c: 100:     temp_value = divu10(temp_value);
  1404  0119  0846               	movf	_temp_value+1,w
  1405  011A  00AA               	movwf	divu10@n+1
  1406  011B  0845               	movf	_temp_value,w
  1407  011C  00A9               	movwf	divu10@n
  1408  011D  2141               	fcall	_divu10
  1409  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1410  011F  082A               	movf	?_divu10+1,w
  1411  0120  00C6               	movwf	_temp_value+1
  1412  0121  0829               	movf	?_divu10,w
  1413  0122  00C5               	movwf	_temp_value
  1414                           
  1415                           ;software_uart.c: 101:     first_digit = intToASCII(temp_value%10);
  1416  0123  300A               	movlw	10
  1417  0124  00A9               	movwf	___awmod@divisor
  1418  0125  3000               	movlw	0
  1419  0126  00AA               	movwf	___awmod@divisor+1
  1420  0127  0846               	movf	_temp_value+1,w
  1421  0128  00AC               	movwf	___awmod@dividend+1
  1422  0129  0845               	movf	_temp_value,w
  1423  012A  00AB               	movwf	___awmod@dividend
  1424  012B  21BC               	fcall	___awmod
  1425  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1426  012D  0829               	movf	?___awmod,w
  1427  012E  2397               	fcall	_intToASCII
  1428  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1429  0130  00B3               	movwf	??_soft_uart_send_ALL
  1430  0131  0833               	movf	??_soft_uart_send_ALL,w
  1431  0132  00CB               	movwf	_first_digit
  1432                           
  1433                           ;software_uart.c: 103:     soft_uart_send_string("current_position: ");
  1434  0133  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1435  0134  232C               	fcall	_soft_uart_send_string
  1436                           
  1437                           ;software_uart.c: 104:     soft_uart_send_uint8_t(first_digit);
  1438  0135  1283               	bcf	3,5	;RP0=0, select bank0
  1439  0136  084B               	movf	_first_digit,w
  1440  0137  224D               	fcall	_soft_uart_send_uint8_t
  1441                           
  1442                           ;software_uart.c: 105:     soft_uart_send_uint8_t(second_digit);
  1443  0138  1283               	bcf	3,5	;RP0=0, select bank0
  1444  0139  084C               	movf	_second_digit,w
  1445  013A  224D               	fcall	_soft_uart_send_uint8_t
  1446                           
  1447                           ;software_uart.c: 106:     soft_uart_send_uint8_t(third_digit);
  1448  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1449  013C  084D               	movf	_third_digit,w
  1450  013D  224D               	fcall	_soft_uart_send_uint8_t
  1451                           
  1452                           ;software_uart.c: 107:     soft_uart_send_string("\n");
  1453  013E  3032               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1454  013F  232C               	fcall	_soft_uart_send_string
  1455  0140  0008               	return
  1456  0141                     __end_of_soft_uart_send_ALL:
  1457                           
  1458                           	psect	text4
  1459  032C                     __ptext4:	
  1460 ;; *************** function _soft_uart_send_string *****************
  1461 ;; Defined at:
  1462 ;;		line 51 in file "software_uart.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  string          1    wreg     PTR unsigned char 
  1465 ;;		 -> STR_6(2), STR_5(19), STR_4(2), STR_3(16), 
  1466 ;;		 -> STR_2(2), STR_1(14), 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  string          1   14[BANK0 ] PTR unsigned char 
  1469 ;;		 -> STR_6(2), STR_5(19), STR_4(2), STR_3(16), 
  1470 ;;		 -> STR_2(2), STR_1(14), 
  1471 ;;  i               1   13[BANK0 ] unsigned char 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMMON   BANK0
  1481 ;;      Params:         0       0
  1482 ;;      Locals:         0       2
  1483 ;;      Temps:          0       1
  1484 ;;      Totals:         0       3
  1485 ;;Total ram usage:        3 bytes
  1486 ;; Hardware stack levels used: 1
  1487 ;; Hardware stack levels required when called: 4
  1488 ;; This function calls:
  1489 ;;		_soft_uart_send_uint8_t
  1490 ;; This function is called by:
  1491 ;;		_soft_uart_send_ALL
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495  032C                     _soft_uart_send_string:	
  1496                           ;psect for function _soft_uart_send_string
  1497                           
  1498                           
  1499                           ;incstack = 0
  1500                           ; Regs used in _soft_uart_send_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1501                           ;soft_uart_send_string@string stored from wreg
  1502  032C  1283               	bcf	3,5	;RP0=0, select bank0
  1503  032D  00AE               	movwf	soft_uart_send_string@string
  1504                           
  1505                           ;software_uart.c: 53:     uint8_t i = 0;
  1506  032E  01AD               	clrf	soft_uart_send_string@i
  1507  032F                     l1275:	
  1508                           ;software_uart.c: 54:     while (string[i] != '\0') {
  1509                           
  1510                           
  1511                           ;software_uart.c: 54:     while (string[i] != '\0') {
  1512  032F  082D               	movf	soft_uart_send_string@i,w
  1513  0330  072E               	addwf	soft_uart_send_string@string,w
  1514  0331  0084               	movwf	4
  1515  0332  22C5               	fcall	stringdir
  1516  0333  3A00               	xorlw	0
  1517  0334  1903               	btfsc	3,2
  1518  0335  0008               	return
  1519                           
  1520                           ;software_uart.c: 56:         soft_uart_send_uint8_t((uint8_t)string[i]);
  1521  0336  082D               	movf	soft_uart_send_string@i,w
  1522  0337  072E               	addwf	soft_uart_send_string@string,w
  1523  0338  0084               	movwf	4
  1524  0339  22C5               	fcall	stringdir
  1525  033A  224D               	fcall	_soft_uart_send_uint8_t
  1526                           
  1527                           ;software_uart.c: 57:         i++;
  1528  033B  3001               	movlw	1
  1529  033C  1283               	bcf	3,5	;RP0=0, select bank0
  1530  033D  00AC               	movwf	??_soft_uart_send_string
  1531  033E  082C               	movf	??_soft_uart_send_string,w
  1532  033F  07AD               	addwf	soft_uart_send_string@i,f
  1533  0340  2B2F               	goto	l1275
  1534  0341                     __end_of_soft_uart_send_string:
  1535                           
  1536                           	psect	text5
  1537  024D                     __ptext5:	
  1538 ;; *************** function _soft_uart_send_uint8_t *****************
  1539 ;; Defined at:
  1540 ;;		line 19 in file "software_uart.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;  value           1    wreg     unsigned char 
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  value           1   10[BANK0 ] unsigned char 
  1545 ;;  i               1   11[BANK0 ] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  1    wreg      void 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0
  1555 ;;      Params:         0       0
  1556 ;;      Locals:         0       2
  1557 ;;      Temps:          0       1
  1558 ;;      Totals:         0       3
  1559 ;;Total ram usage:        3 bytes
  1560 ;; Hardware stack levels used: 1
  1561 ;; Hardware stack levels required when called: 3
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_soft_uart_send_string
  1566 ;;		_soft_uart_send_ALL
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570  024D                     _soft_uart_send_uint8_t:	
  1571                           ;psect for function _soft_uart_send_uint8_t
  1572                           
  1573                           
  1574                           ;incstack = 0
  1575                           ; Regs used in _soft_uart_send_uint8_t: [wreg+status,2+status,0]
  1576                           ;soft_uart_send_uint8_t@value stored from wreg
  1577  024D  1283               	bcf	3,5	;RP0=0, select bank0
  1578  024E  00AA               	movwf	soft_uart_send_uint8_t@value
  1579                           
  1580                           ;software_uart.c: 22:     GPIO5 = 0;
  1581  024F  1285               	bcf	5,5	;volatile
  1582                           
  1583                           ;software_uart.c: 23:     _delay((unsigned long)((905)*(4000000/4000000.0)));
  1584  0250  30B4               	movlw	180
  1585  0251  00A9               	movwf	??_soft_uart_send_uint8_t
  1586  0252                     u577:
  1587  0252  2A53               	nop2
  1588  0253  0BA9               	decfsz	??_soft_uart_send_uint8_t,f
  1589  0254  2A52               	goto	u577
  1590  0255  2A56               	nop2
  1591  0256  2A57               	nop2
  1592                           
  1593                           ;software_uart.c: 26:     for(uint8_t i=0; i<8; i++) {
  1594  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1595  0258  01AB               	clrf	soft_uart_send_uint8_t@i
  1596  0259                     l1243:
  1597                           
  1598                           ;software_uart.c: 28:         GPIO5 = (value>>i) & 0b1;
  1599  0259  082A               	movf	soft_uart_send_uint8_t@value,w
  1600  025A  00A9               	movwf	??_soft_uart_send_uint8_t
  1601  025B  0A2B               	incf	soft_uart_send_uint8_t@i,w
  1602  025C  2A5F               	goto	u284
  1603  025D                     u285:
  1604  025D  1003               	clrc
  1605  025E  0CA9               	rrf	??_soft_uart_send_uint8_t,f
  1606  025F                     u284:
  1607  025F  3EFF               	addlw	-1
  1608  0260  1D03               	skipz
  1609  0261  2A5D               	goto	u285
  1610  0262  1C29               	btfss	??_soft_uart_send_uint8_t,0
  1611  0263  2A67               	goto	u290
  1612  0264  1283               	bcf	3,5	;RP0=0, select bank0
  1613  0265  1685               	bsf	5,5	;volatile
  1614  0266  2A69               	goto	l1245
  1615  0267                     u290:
  1616  0267  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0268  1285               	bcf	5,5	;volatile
  1618  0269                     l1245:
  1619                           
  1620                           ;software_uart.c: 30:         _delay((unsigned long)((905)*(4000000/4000000.0)));
  1621  0269  30B4               	movlw	180
  1622  026A  00A9               	movwf	??_soft_uart_send_uint8_t
  1623  026B                     u587:
  1624  026B  2A6C               	nop2
  1625  026C  0BA9               	decfsz	??_soft_uart_send_uint8_t,f
  1626  026D  2A6B               	goto	u587
  1627  026E  2A6F               	nop2
  1628  026F  2A70               	nop2
  1629                           
  1630                           ;software_uart.c: 31:     }
  1631  0270  3001               	movlw	1
  1632  0271  1283               	bcf	3,5	;RP0=0, select bank0
  1633  0272  00A9               	movwf	??_soft_uart_send_uint8_t
  1634  0273  0829               	movf	??_soft_uart_send_uint8_t,w
  1635  0274  07AB               	addwf	soft_uart_send_uint8_t@i,f
  1636  0275  3008               	movlw	8
  1637  0276  022B               	subwf	soft_uart_send_uint8_t@i,w
  1638  0277  1C03               	skipc
  1639  0278  2A59               	goto	l1243
  1640                           
  1641                           ;software_uart.c: 34:     GPIO5 = 1;
  1642  0279  1685               	bsf	5,5	;volatile
  1643                           
  1644                           ;software_uart.c: 35:     _delay((unsigned long)((905)*(4000000/4000000.0)));
  1645  027A  30B4               	movlw	180
  1646  027B  00A9               	movwf	??_soft_uart_send_uint8_t
  1647  027C                     u597:
  1648  027C  2A7D               	nop2
  1649  027D  0BA9               	decfsz	??_soft_uart_send_uint8_t,f
  1650  027E  2A7C               	goto	u597
  1651  027F  2A80               	nop2
  1652  0280  2A81               	nop2
  1653                           
  1654                           ;software_uart.c: 36:     _delay((unsigned long)((905)*(4000000/4000000.0)));
  1655  0281  30B4               	movlw	180
  1656  0282  1283               	bcf	3,5	;RP0=0, select bank0
  1657  0283  00A9               	movwf	??_soft_uart_send_uint8_t
  1658  0284                     u607:
  1659  0284  2A85               	nop2
  1660  0285  0BA9               	decfsz	??_soft_uart_send_uint8_t,f
  1661  0286  2A84               	goto	u607
  1662  0287  2A88               	nop2
  1663  0288  2A89               	nop2
  1664  0289  0008               	return
  1665  028A                     __end_of_soft_uart_send_uint8_t:
  1666                           
  1667                           	psect	text6
  1668  0397                     __ptext6:	
  1669 ;; *************** function _intToASCII *****************
  1670 ;; Defined at:
  1671 ;;		line 7 in file "software_uart.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  num             1    wreg     unsigned char 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  num             1    9[BANK0 ] unsigned char 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      unsigned char 
  1678 ;; Registers used:
  1679 ;;		wreg, status,2, status,0
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMMON   BANK0
  1685 ;;      Params:         0       0
  1686 ;;      Locals:         0       1
  1687 ;;      Temps:          0       0
  1688 ;;      Totals:         0       1
  1689 ;;Total ram usage:        1 bytes
  1690 ;; Hardware stack levels used: 1
  1691 ;; Hardware stack levels required when called: 3
  1692 ;; This function calls:
  1693 ;;		Nothing
  1694 ;; This function is called by:
  1695 ;;		_soft_uart_send_ALL
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699  0397                     _intToASCII:	
  1700                           ;psect for function _intToASCII
  1701                           
  1702                           
  1703                           ;incstack = 0
  1704                           ; Regs used in _intToASCII: [wreg+status,2+status,0]
  1705                           ;intToASCII@num stored from wreg
  1706  0397  1283               	bcf	3,5	;RP0=0, select bank0
  1707  0398  00A9               	movwf	intToASCII@num
  1708                           
  1709                           ;software_uart.c: 8:     return '0' + num;
  1710  0399  0829               	movf	intToASCII@num,w
  1711  039A  3E30               	addlw	48
  1712  039B  0008               	return
  1713  039C                     __end_of_intToASCII:
  1714                           
  1715                           	psect	text7
  1716  0141                     __ptext7:	
  1717 ;; *************** function _divu10 *****************
  1718 ;; Defined at:
  1719 ;;		line 40 in file "software_uart.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  n               2    9[BANK0 ] unsigned int 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  q               2   17[BANK0 ] unsigned int 
  1724 ;;  r               2   15[BANK0 ] unsigned int 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  2    9[BANK0 ] unsigned int 
  1727 ;; Registers used:
  1728 ;;		wreg, status,2, status,0
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMMON   BANK0
  1734 ;;      Params:         0       2
  1735 ;;      Locals:         0       4
  1736 ;;      Temps:          0       4
  1737 ;;      Totals:         0      10
  1738 ;;Total ram usage:       10 bytes
  1739 ;; Hardware stack levels used: 1
  1740 ;; Hardware stack levels required when called: 3
  1741 ;; This function calls:
  1742 ;;		Nothing
  1743 ;; This function is called by:
  1744 ;;		_soft_uart_send_ALL
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748  0141                     _divu10:	
  1749                           ;psect for function _divu10
  1750                           
  1751                           
  1752                           ;software_uart.c: 41:     unsigned q, r;;software_uart.c: 42:     q = (n >> 1) + (n >> 2
      +                          );
  1753                           
  1754                           ;incstack = 0
  1755                           ; Regs used in _divu10: [wreg+status,2+status,0]
  1756  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1757  0142  082A               	movf	divu10@n+1,w
  1758  0143  00AC               	movwf	??_divu10+1
  1759  0144  0829               	movf	divu10@n,w
  1760  0145  00AB               	movwf	??_divu10
  1761  0146  1003               	clrc
  1762  0147  0CAC               	rrf	??_divu10+1,f
  1763  0148  0CAB               	rrf	??_divu10,f
  1764  0149  1003               	clrc
  1765  014A  0CAC               	rrf	??_divu10+1,f
  1766  014B  0CAB               	rrf	??_divu10,f
  1767  014C  082A               	movf	divu10@n+1,w
  1768  014D  00AE               	movwf	??_divu10+3
  1769  014E  0829               	movf	divu10@n,w
  1770  014F  00AD               	movwf	??_divu10+2
  1771  0150  1003               	clrc
  1772  0151  0CAE               	rrf	??_divu10+3,f
  1773  0152  0CAD               	rrf	??_divu10+2,f
  1774  0153  082B               	movf	??_divu10,w
  1775  0154  072D               	addwf	??_divu10+2,w
  1776  0155  00B1               	movwf	divu10@q
  1777  0156  082C               	movf	??_divu10+1,w
  1778  0157  1803               	skipnc
  1779  0158  0A2C               	incf	??_divu10+1,w
  1780  0159  072E               	addwf	??_divu10+3,w
  1781  015A  00B2               	movwf	divu10@q+1
  1782                           
  1783                           ;software_uart.c: 43:     q = q + (q >> 4);
  1784  015B  0832               	movf	divu10@q+1,w
  1785  015C  00AC               	movwf	??_divu10+1
  1786  015D  0831               	movf	divu10@q,w
  1787  015E  00AB               	movwf	??_divu10
  1788  015F  3004               	movlw	4
  1789  0160                     u325:
  1790  0160  1003               	clrc
  1791  0161  0CAC               	rrf	??_divu10+1,f
  1792  0162  0CAB               	rrf	??_divu10,f
  1793  0163  3EFF               	addlw	-1
  1794  0164  1D03               	skipz
  1795  0165  2960               	goto	u325
  1796  0166  0831               	movf	divu10@q,w
  1797  0167  072B               	addwf	??_divu10,w
  1798  0168  00B1               	movwf	divu10@q
  1799  0169  0832               	movf	divu10@q+1,w
  1800  016A  1803               	skipnc
  1801  016B  0A32               	incf	divu10@q+1,w
  1802  016C  072C               	addwf	??_divu10+1,w
  1803  016D  00B2               	movwf	divu10@q+1
  1804                           
  1805                           ;software_uart.c: 44:     q = q + (q >> 8);
  1806  016E  0832               	movf	divu10@q+1,w
  1807  016F  00AC               	movwf	??_divu10+1
  1808  0170  0831               	movf	divu10@q,w
  1809  0171  00AB               	movwf	??_divu10
  1810  0172  082C               	movf	??_divu10+1,w
  1811  0173  00AB               	movwf	??_divu10
  1812  0174  01AC               	clrf	??_divu10+1
  1813  0175  0831               	movf	divu10@q,w
  1814  0176  072B               	addwf	??_divu10,w
  1815  0177  00B1               	movwf	divu10@q
  1816  0178  0832               	movf	divu10@q+1,w
  1817  0179  1803               	skipnc
  1818  017A  0A32               	incf	divu10@q+1,w
  1819  017B  072C               	addwf	??_divu10+1,w
  1820  017C  00B2               	movwf	divu10@q+1
  1821                           
  1822                           ;software_uart.c: 46:     q = q >> 3;
  1823  017D  0832               	movf	divu10@q+1,w
  1824  017E  00AC               	movwf	??_divu10+1
  1825  017F  0831               	movf	divu10@q,w
  1826  0180  00AB               	movwf	??_divu10
  1827  0181  1003               	clrc
  1828  0182  0CAC               	rrf	??_divu10+1,f
  1829  0183  0CAB               	rrf	??_divu10,f
  1830  0184  1003               	clrc
  1831  0185  0CAC               	rrf	??_divu10+1,f
  1832  0186  0CAB               	rrf	??_divu10,f
  1833  0187  1003               	clrc
  1834  0188  0CAC               	rrf	??_divu10+1,f
  1835  0189  0CAB               	rrf	??_divu10,f
  1836  018A  082B               	movf	??_divu10,w
  1837  018B  00B1               	movwf	divu10@q
  1838  018C  082C               	movf	??_divu10+1,w
  1839  018D  00B2               	movwf	divu10@q+1
  1840                           
  1841                           ;software_uart.c: 47:     r = n - (((q << 2) + q) << 1);
  1842  018E  0832               	movf	divu10@q+1,w
  1843  018F  00AC               	movwf	??_divu10+1
  1844  0190  0831               	movf	divu10@q,w
  1845  0191  00AB               	movwf	??_divu10
  1846  0192  1003               	clrc
  1847  0193  0DAB               	rlf	??_divu10,f
  1848  0194  0DAC               	rlf	??_divu10+1,f
  1849  0195  1003               	clrc
  1850  0196  0DAB               	rlf	??_divu10,f
  1851  0197  0DAC               	rlf	??_divu10+1,f
  1852  0198  0831               	movf	divu10@q,w
  1853  0199  072B               	addwf	??_divu10,w
  1854  019A  00AD               	movwf	??_divu10+2
  1855  019B  0832               	movf	divu10@q+1,w
  1856  019C  1803               	skipnc
  1857  019D  0A32               	incf	divu10@q+1,w
  1858  019E  072C               	addwf	??_divu10+1,w
  1859  019F  00AE               	movwf	??_divu10+3
  1860  01A0  1003               	clrc
  1861  01A1  0DAD               	rlf	??_divu10+2,f
  1862  01A2  0DAE               	rlf	??_divu10+3,f
  1863  01A3  082D               	movf	??_divu10+2,w
  1864  01A4  0229               	subwf	divu10@n,w
  1865  01A5  00AF               	movwf	divu10@r
  1866  01A6  082E               	movf	??_divu10+3,w
  1867  01A7  1C03               	skipc
  1868  01A8  0A2E               	incf	??_divu10+3,w
  1869  01A9  022A               	subwf	divu10@n+1,w
  1870  01AA  00B0               	movwf	divu10@r+1
  1871                           
  1872                           ;software_uart.c: 48:     return q + (r > 9);
  1873  01AB  3000               	movlw	0
  1874  01AC  0230               	subwf	divu10@r+1,w
  1875  01AD  300A               	movlw	10
  1876  01AE  1903               	skipnz
  1877  01AF  022F               	subwf	divu10@r,w
  1878  01B0  1C03               	btfss	3,0
  1879  01B1  29B4               	goto	u330
  1880  01B2  3001               	movlw	1
  1881  01B3  29B5               	goto	u340
  1882  01B4                     u330:
  1883  01B4  3000               	movlw	0
  1884  01B5                     u340:
  1885  01B5  0731               	addwf	divu10@q,w
  1886  01B6  00A9               	movwf	?_divu10
  1887  01B7  0832               	movf	divu10@q+1,w
  1888  01B8  1803               	skipnc
  1889  01B9  0A32               	incf	divu10@q+1,w
  1890  01BA  00AA               	movwf	?_divu10+1
  1891  01BB  0008               	return
  1892  01BC                     __end_of_divu10:
  1893                           
  1894                           	psect	text8
  1895  01BC                     __ptext8:	
  1896 ;; *************** function ___awmod *****************
  1897 ;; Defined at:
  1898 ;;		line 5 in file "/opt/microchip/xc8/v2.36/pic/sources/c90/common/awmod.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;  divisor         2    9[BANK0 ] int 
  1901 ;;  dividend        2   11[BANK0 ] int 
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;  sign            1   15[BANK0 ] unsigned char 
  1904 ;;  counter         1   14[BANK0 ] unsigned char 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  2    9[BANK0 ] int 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, status,0
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMMON   BANK0
  1914 ;;      Params:         0       4
  1915 ;;      Locals:         0       2
  1916 ;;      Temps:          0       1
  1917 ;;      Totals:         0       7
  1918 ;;Total ram usage:        7 bytes
  1919 ;; Hardware stack levels used: 1
  1920 ;; Hardware stack levels required when called: 3
  1921 ;; This function calls:
  1922 ;;		Nothing
  1923 ;; This function is called by:
  1924 ;;		_soft_uart_send_ALL
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928  01BC                     ___awmod:	
  1929                           ;psect for function ___awmod
  1930                           
  1931                           
  1932                           ;incstack = 0
  1933                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1934  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1935  01BD  01AF               	clrf	___awmod@sign
  1936  01BE  1FAC               	btfss	___awmod@dividend+1,7
  1937  01BF  29C7               	goto	l1287
  1938  01C0  09AB               	comf	___awmod@dividend,f
  1939  01C1  09AC               	comf	___awmod@dividend+1,f
  1940  01C2  0AAB               	incf	___awmod@dividend,f
  1941  01C3  1903               	skipnz
  1942  01C4  0AAC               	incf	___awmod@dividend+1,f
  1943  01C5  01AF               	clrf	___awmod@sign
  1944  01C6  0AAF               	incf	___awmod@sign,f
  1945  01C7                     l1287:
  1946  01C7  1FAA               	btfss	___awmod@divisor+1,7
  1947  01C8  29CE               	goto	l1291
  1948  01C9  09A9               	comf	___awmod@divisor,f
  1949  01CA  09AA               	comf	___awmod@divisor+1,f
  1950  01CB  0AA9               	incf	___awmod@divisor,f
  1951  01CC  1903               	skipnz
  1952  01CD  0AAA               	incf	___awmod@divisor+1,f
  1953  01CE                     l1291:
  1954  01CE  0829               	movf	___awmod@divisor,w
  1955  01CF  042A               	iorwf	___awmod@divisor+1,w
  1956  01D0  1903               	btfsc	3,2
  1957  01D1  29FB               	goto	l1309
  1958  01D2  01AE               	clrf	___awmod@counter
  1959  01D3  0AAE               	incf	___awmod@counter,f
  1960  01D4                     l1299:
  1961  01D4  1BAA               	btfsc	___awmod@divisor+1,7
  1962  01D5  29E2               	goto	l1301
  1963  01D6  3001               	movlw	1
  1964  01D7                     u395:
  1965  01D7  1003               	clrc
  1966  01D8  0DA9               	rlf	___awmod@divisor,f
  1967  01D9  0DAA               	rlf	___awmod@divisor+1,f
  1968  01DA  3EFF               	addlw	-1
  1969  01DB  1D03               	skipz
  1970  01DC  29D7               	goto	u395
  1971  01DD  3001               	movlw	1
  1972  01DE  00AD               	movwf	??___awmod
  1973  01DF  082D               	movf	??___awmod,w
  1974  01E0  07AE               	addwf	___awmod@counter,f
  1975  01E1  29D4               	goto	l1299
  1976  01E2                     l1301:
  1977  01E2  082A               	movf	___awmod@divisor+1,w
  1978  01E3  022C               	subwf	___awmod@dividend+1,w
  1979  01E4  1D03               	skipz
  1980  01E5  29E8               	goto	u415
  1981  01E6  0829               	movf	___awmod@divisor,w
  1982  01E7  022B               	subwf	___awmod@dividend,w
  1983  01E8                     u415:
  1984  01E8  1C03               	skipc
  1985  01E9  29F0               	goto	l1305
  1986  01EA  0829               	movf	___awmod@divisor,w
  1987  01EB  02AB               	subwf	___awmod@dividend,f
  1988  01EC  082A               	movf	___awmod@divisor+1,w
  1989  01ED  1C03               	skipc
  1990  01EE  03AC               	decf	___awmod@dividend+1,f
  1991  01EF  02AC               	subwf	___awmod@dividend+1,f
  1992  01F0                     l1305:
  1993  01F0  3001               	movlw	1
  1994  01F1                     u425:
  1995  01F1  1003               	clrc
  1996  01F2  0CAA               	rrf	___awmod@divisor+1,f
  1997  01F3  0CA9               	rrf	___awmod@divisor,f
  1998  01F4  3EFF               	addlw	-1
  1999  01F5  1D03               	skipz
  2000  01F6  29F1               	goto	u425
  2001  01F7  3001               	movlw	1
  2002  01F8  02AE               	subwf	___awmod@counter,f
  2003  01F9  1D03               	btfss	3,2
  2004  01FA  29E2               	goto	l1301
  2005  01FB                     l1309:
  2006  01FB  082F               	movf	___awmod@sign,w
  2007  01FC  1903               	btfsc	3,2
  2008  01FD  2A03               	goto	l1313
  2009  01FE  09AB               	comf	___awmod@dividend,f
  2010  01FF  09AC               	comf	___awmod@dividend+1,f
  2011  0200  0AAB               	incf	___awmod@dividend,f
  2012  0201  1903               	skipnz
  2013  0202  0AAC               	incf	___awmod@dividend+1,f
  2014  0203                     l1313:
  2015  0203  082C               	movf	___awmod@dividend+1,w
  2016  0204  00AA               	movwf	?___awmod+1
  2017  0205  082B               	movf	___awmod@dividend,w
  2018  0206  00A9               	movwf	?___awmod
  2019  0207  0008               	return
  2020  0208                     __end_of___awmod:
  2021                           
  2022                           	psect	text9
  2023  039C                     __ptext9:	
  2024 ;; *************** function _soft_uart_init *****************
  2025 ;; Defined at:
  2026 ;;		line 11 in file "software_uart.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;		None
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		None
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0
  2040 ;;      Params:         0       0
  2041 ;;      Locals:         0       0
  2042 ;;      Temps:          0       0
  2043 ;;      Totals:         0       0
  2044 ;;Total ram usage:        0 bytes
  2045 ;; Hardware stack levels used: 1
  2046 ;; Hardware stack levels required when called: 3
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054  039C                     _soft_uart_init:	
  2055                           ;psect for function _soft_uart_init
  2056                           
  2057                           
  2058                           ;software_uart.c: 14:     TRISIO5 = 0;
  2059                           
  2060                           ;incstack = 0
  2061                           ; Regs used in _soft_uart_init: []
  2062  039C  1683               	bsf	3,5	;RP0=1, select bank1
  2063  039D  1285               	bcf	5,5	;volatile
  2064                           
  2065                           ;software_uart.c: 15:     GPIO5 = 1;
  2066  039E  1283               	bcf	3,5	;RP0=0, select bank0
  2067  039F  1685               	bsf	5,5	;volatile
  2068  03A0  0008               	return
  2069  03A1                     __end_of_soft_uart_init:
  2070                           
  2071                           	psect	text10
  2072  03A1                     __ptext10:	
  2073 ;; *************** function _retrieve_current_position *****************
  2074 ;; Defined at:
  2075 ;;		line 54 in file "tmr1_module.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;		None
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		status,2
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMMON   BANK0
  2089 ;;      Params:         0       0
  2090 ;;      Locals:         0       0
  2091 ;;      Temps:          0       0
  2092 ;;      Totals:         0       0
  2093 ;;Total ram usage:        0 bytes
  2094 ;; Hardware stack levels used: 1
  2095 ;; Hardware stack levels required when called: 3
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_main
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103  03A1                     _retrieve_current_position:	
  2104                           ;psect for function _retrieve_current_position
  2105                           
  2106                           
  2107                           ;tmr1_module.c: 56:     current_position = 0;
  2108                           
  2109                           ;incstack = 0
  2110                           ; Regs used in _retrieve_current_position: [status,2]
  2111  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2112  03A2  01C7               	clrf	_current_position
  2113  03A3  01C8               	clrf	_current_position+1
  2114  03A4  0008               	return
  2115  03A5                     __end_of_retrieve_current_position:
  2116                           
  2117                           	psect	text11
  2118  037F                     __ptext11:	
  2119 ;; *************** function _reset_all_pins *****************
  2120 ;; Defined at:
  2121 ;;		line 55 in file "coil_control.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;		None
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;		None
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		None
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMMON   BANK0
  2135 ;;      Params:         0       0
  2136 ;;      Locals:         0       0
  2137 ;;      Temps:          0       0
  2138 ;;      Totals:         0       0
  2139 ;;Total ram usage:        0 bytes
  2140 ;; Hardware stack levels used: 1
  2141 ;; Hardware stack levels required when called: 3
  2142 ;; This function calls:
  2143 ;;		Nothing
  2144 ;; This function is called by:
  2145 ;;		_main
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149  037F                     _reset_all_pins:	
  2150                           ;psect for function _reset_all_pins
  2151                           
  2152                           
  2153                           ;coil_control.c: 56:     GPIO0 = 0;
  2154                           
  2155                           ;incstack = 0
  2156                           ; Regs used in _reset_all_pins: []
  2157  037F  1283               	bcf	3,5	;RP0=0, select bank0
  2158  0380  1005               	bcf	5,0	;volatile
  2159                           
  2160                           ;coil_control.c: 57:     GPIO1 = 0;
  2161  0381  1085               	bcf	5,1	;volatile
  2162                           
  2163                           ;coil_control.c: 58:     GPIO2 = 0;
  2164  0382  1105               	bcf	5,2	;volatile
  2165                           
  2166                           ;coil_control.c: 59:     GPIO4 = 0;
  2167  0383  1205               	bcf	5,4	;volatile
  2168  0384  0008               	return
  2169  0385                     __end_of_reset_all_pins:
  2170                           
  2171                           	psect	text12
  2172  0385                     __ptext12:	
  2173 ;; *************** function _interrupt_init *****************
  2174 ;; Defined at:
  2175 ;;		line 4 in file "interrupts.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		None
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMMON   BANK0
  2189 ;;      Params:         0       0
  2190 ;;      Locals:         0       0
  2191 ;;      Temps:          0       0
  2192 ;;      Totals:         0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used: 1
  2195 ;; Hardware stack levels required when called: 3
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_main
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203  0385                     _interrupt_init:	
  2204                           ;psect for function _interrupt_init
  2205                           
  2206                           
  2207                           ;interrupts.c: 5:     GIE = 1;
  2208                           
  2209                           ;incstack = 0
  2210                           ; Regs used in _interrupt_init: []
  2211  0385  178B               	bsf	11,7	;volatile
  2212                           
  2213                           ;interrupts.c: 6:     PEIE = 1;
  2214  0386  170B               	bsf	11,6	;volatile
  2215                           
  2216                           ;interrupts.c: 7:     TMR0IE = 0;
  2217  0387  128B               	bcf	11,5	;volatile
  2218                           
  2219                           ;interrupts.c: 8:     TMR1IE = 1;
  2220  0388  1683               	bsf	3,5	;RP0=1, select bank1
  2221  0389  140C               	bsf	12,0	;volatile
  2222  038A  0008               	return
  2223  038B                     __end_of_interrupt_init:
  2224                           
  2225                           	psect	text13
  2226  03A5                     __ptext13:	
  2227 ;; *************** function _comparator_deinit *****************
  2228 ;; Defined at:
  2229 ;;		line 4 in file "comparator_module.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;		None
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;		None
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      void 
  2236 ;; Registers used:
  2237 ;;		wreg, status,2, status,0
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMMON   BANK0
  2243 ;;      Params:         0       0
  2244 ;;      Locals:         0       0
  2245 ;;      Temps:          0       0
  2246 ;;      Totals:         0       0
  2247 ;;Total ram usage:        0 bytes
  2248 ;; Hardware stack levels used: 1
  2249 ;; Hardware stack levels required when called: 3
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257  03A5                     _comparator_deinit:	
  2258                           ;psect for function _comparator_deinit
  2259                           
  2260                           
  2261                           ;comparator_module.c: 5:     CMCONbits.CM = 0b111;
  2262                           
  2263                           ;incstack = 0
  2264                           ; Regs used in _comparator_deinit: [wreg+status,2+status,0]
  2265  03A5  3007               	movlw	7
  2266  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  2267  03A7  0499               	iorwf	25,f	;volatile
  2268  03A8  0008               	return
  2269  03A9                     __end_of_comparator_deinit:
  2270                           
  2271                           	psect	text14
  2272  0372                     __ptext14:	
  2273 ;; *************** function _coil_init *****************
  2274 ;; Defined at:
  2275 ;;		line 21 in file "coil_control.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;		None
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;		None
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		None
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMMON   BANK0
  2289 ;;      Params:         0       0
  2290 ;;      Locals:         0       0
  2291 ;;      Temps:          0       0
  2292 ;;      Totals:         0       0
  2293 ;;Total ram usage:        0 bytes
  2294 ;; Hardware stack levels used: 1
  2295 ;; Hardware stack levels required when called: 3
  2296 ;; This function calls:
  2297 ;;		Nothing
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303  0372                     _coil_init:	
  2304                           ;psect for function _coil_init
  2305                           
  2306                           
  2307                           ;coil_control.c: 23:     TRISIO3 = 1;
  2308                           
  2309                           ;incstack = 0
  2310                           ; Regs used in _coil_init: []
  2311  0372  1683               	bsf	3,5	;RP0=1, select bank1
  2312  0373  1585               	bsf	5,3	;volatile
  2313                           
  2314                           ;coil_control.c: 24:     TRISIO0 = 0;
  2315  0374  1005               	bcf	5,0	;volatile
  2316                           
  2317                           ;coil_control.c: 25:     TRISIO1 = 0;
  2318  0375  1085               	bcf	5,1	;volatile
  2319                           
  2320                           ;coil_control.c: 26:     TRISIO2 = 0;
  2321  0376  1105               	bcf	5,2	;volatile
  2322                           
  2323                           ;coil_control.c: 27:     TRISIO4 = 0;
  2324  0377  1205               	bcf	5,4	;volatile
  2325  0378  0008               	return
  2326  0379                     __end_of_coil_init:
  2327                           
  2328                           	psect	text15
  2329  038B                     __ptext15:	
  2330 ;; *************** function _adc_deinit *****************
  2331 ;; Defined at:
  2332 ;;		line 4 in file "adc_module.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;		None
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      void 
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0
  2346 ;;      Params:         0       0
  2347 ;;      Locals:         0       0
  2348 ;;      Temps:          0       0
  2349 ;;      Totals:         0       0
  2350 ;;Total ram usage:        0 bytes
  2351 ;; Hardware stack levels used: 1
  2352 ;; Hardware stack levels required when called: 3
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_main
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360  038B                     _adc_deinit:	
  2361                           ;psect for function _adc_deinit
  2362                           
  2363                           
  2364                           ;adc_module.c: 5:     ADON = 0;
  2365                           
  2366                           ;incstack = 0
  2367                           ; Regs used in _adc_deinit: [wreg+status,2+status,0]
  2368  038B  1283               	bcf	3,5	;RP0=0, select bank0
  2369  038C  101F               	bcf	31,0	;volatile
  2370                           
  2371                           ;adc_module.c: 6:     ANSELbits.ANS = 0b0000;
  2372  038D  30F0               	movlw	-16
  2373  038E  1683               	bsf	3,5	;RP0=1, select bank1
  2374  038F  059F               	andwf	31,f	;volatile
  2375  0390  0008               	return
  2376  0391                     __end_of_adc_deinit:
  2377                           
  2378                           	psect	text16
  2379  035E                     __ptext16:	
  2380 ;; *************** function _TMR1_init *****************
  2381 ;; Defined at:
  2382 ;;		line 4 in file "tmr1_module.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;		None
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      void 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMMON   BANK0
  2396 ;;      Params:         0       0
  2397 ;;      Locals:         0       0
  2398 ;;      Temps:          0       0
  2399 ;;      Totals:         0       0
  2400 ;;Total ram usage:        0 bytes
  2401 ;; Hardware stack levels used: 1
  2402 ;; Hardware stack levels required when called: 3
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_main
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410  035E                     _TMR1_init:	
  2411                           ;psect for function _TMR1_init
  2412                           
  2413                           
  2414                           ;tmr1_module.c: 5:     TMR1GE = 0;
  2415                           
  2416                           ;incstack = 0
  2417                           ; Regs used in _TMR1_init: [wreg+status,2+status,0]
  2418  035E  1283               	bcf	3,5	;RP0=0, select bank0
  2419  035F  1310               	bcf	16,6	;volatile
  2420                           
  2421                           ;tmr1_module.c: 6:     T1CONbits.T1CKPS = 0b00;
  2422  0360  30CF               	movlw	-49
  2423  0361  0590               	andwf	16,f	;volatile
  2424                           
  2425                           ;tmr1_module.c: 7:     T1OSCEN = 0;
  2426  0362  1190               	bcf	16,3	;volatile
  2427                           
  2428                           ;tmr1_module.c: 9:     TMR1CS = 0;
  2429  0363  1090               	bcf	16,1	;volatile
  2430                           
  2431                           ;tmr1_module.c: 10:     TMR1ON = 0;
  2432  0364  1010               	bcf	16,0	;volatile
  2433                           
  2434                           ;tmr1_module.c: 11:     TMR1 = 59582;
  2435  0365  30E8               	movlw	232
  2436  0366  008F               	movwf	15	;volatile
  2437  0367  30BE               	movlw	190
  2438  0368  008E               	movwf	14	;volatile
  2439  0369  0008               	return
  2440  036A                     __end_of_TMR1_init:
  2441                           
  2442                           	psect	text17
  2443  0341                     __ptext17:	
  2444 ;; *************** function _ISR *****************
  2445 ;; Defined at:
  2446 ;;		line 52 in file "main.c"
  2447 ;; Parameters:    Size  Location     Type
  2448 ;;		None
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;		None
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  1    wreg      void 
  2453 ;; Registers used:
  2454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMMON   BANK0
  2460 ;;      Params:         0       0
  2461 ;;      Locals:         0       0
  2462 ;;      Temps:          0       4
  2463 ;;      Totals:         0       4
  2464 ;;Total ram usage:        4 bytes
  2465 ;; Hardware stack levels used: 1
  2466 ;; Hardware stack levels required when called: 2
  2467 ;; This function calls:
  2468 ;;		_TMR1_ISR
  2469 ;; This function is called by:
  2470 ;;		Interrupt level 1
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474  0341                     _ISR:	
  2475                           ;psect for function _ISR
  2476                           
  2477                           
  2478                           ;main.c: 54:     if(TMR1IF) {
  2479  0341  1C0C               	btfss	12,0	;volatile
  2480  0342  2B46               	goto	i1l395
  2481                           
  2482                           ;main.c: 55:         TMR1_ISR();
  2483  0343  2208               	fcall	_TMR1_ISR
  2484                           
  2485                           ;main.c: 56:         TMR1IF = 0;
  2486  0344  1283               	bcf	3,5	;RP0=0, select bank0
  2487  0345  100C               	bcf	12,0	;volatile
  2488  0346                     i1l395:
  2489  0346  0828               	movf	??_ISR+3,w
  2490  0347  0827               	movf	??_ISR+2,w
  2491  0348  008A               	movwf	10
  2492  0349  0826               	movf	??_ISR+1,w
  2493  034A  0084               	movwf	4
  2494  034B  0E25               	swapf	??_ISR,w
  2495  034C  0083               	movwf	3
  2496  034D  0EDE               	swapf	94,f
  2497  034E  0E5E               	swapf	94,w
  2498  034F  0009               	retfie
  2499  0350                     __end_of_ISR:
  2500                           
  2501                           	psect	intentry
  2502  0004                     __pintentry:	
  2503                           ;incstack = 0
  2504                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2505                           
  2506  0004                     interrupt_function:
  2507  005E                     saved_w	set	btemp
  2508  0004  00DE               	movwf	btemp
  2509  0005  0E03               	swapf	3,w
  2510  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2511  0007  00A5               	movwf	??_ISR
  2512  0008  0804               	movf	4,w
  2513  0009  00A6               	movwf	??_ISR+1
  2514  000A  080A               	movf	10,w
  2515  000B  00A7               	movwf	??_ISR+2
  2516  000C  085F               	movf	btemp+1,w
  2517  000D  00A8               	movwf	??_ISR+3
  2518  000E  2B41               	ljmp	_ISR
  2519                           
  2520                           	psect	text18
  2521  0208                     __ptext18:	
  2522 ;; *************** function _TMR1_ISR *****************
  2523 ;; Defined at:
  2524 ;;		line 64 in file "tmr1_module.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMMON   BANK0
  2538 ;;      Params:         0       0
  2539 ;;      Locals:         0       0
  2540 ;;      Temps:          0       5
  2541 ;;      Totals:         0       5
  2542 ;;Total ram usage:        5 bytes
  2543 ;; Hardware stack levels used: 1
  2544 ;; Hardware stack levels required when called: 1
  2545 ;; This function calls:
  2546 ;;		_even_pins_clear_set
  2547 ;;		_even_pins_set_clear
  2548 ;;		_odd_pins_clear_set
  2549 ;;		_odd_pins_set_clear
  2550 ;;		i1_reset_all_pins
  2551 ;; This function is called by:
  2552 ;;		_ISR
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556  0208                     _TMR1_ISR:	
  2557                           ;psect for function _TMR1_ISR
  2558                           
  2559                           
  2560                           ;tmr1_module.c: 70:         TMR1 = 59582;
  2561                           
  2562                           ;incstack = 0
  2563                           ; Regs used in _TMR1_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2564  0208  30E8               	movlw	232
  2565  0209  1283               	bcf	3,5	;RP0=0, select bank0
  2566  020A  008F               	movwf	15	;volatile
  2567  020B  30BE               	movlw	190
  2568  020C  008E               	movwf	14	;volatile
  2569                           
  2570                           ;tmr1_module.c: 72:         OF_num_TMR1++;
  2571  020D  3001               	movlw	1
  2572  020E  07C9               	addwf	_OF_num_TMR1,f
  2573  020F  1803               	skipnc
  2574  0210  0ACA               	incf	_OF_num_TMR1+1,f
  2575  0211  3000               	movlw	0
  2576  0212  07CA               	addwf	_OF_num_TMR1+1,f
  2577                           
  2578                           ;tmr1_module.c: 76:         pair_select = !pair_select;
  2579  0213  0850               	movf	_pair_select,w
  2580  0214  1D03               	btfss	3,2
  2581  0215  2A18               	goto	u47_20
  2582  0216  3001               	movlw	1
  2583  0217  2A19               	goto	u48_20
  2584  0218                     u47_20:
  2585  0218  3000               	movlw	0
  2586  0219                     u48_20:
  2587  0219  00A0               	movwf	??_TMR1_ISR
  2588  021A  0820               	movf	??_TMR1_ISR,w
  2589  021B  00D0               	movwf	_pair_select
  2590                           
  2591                           ;tmr1_module.c: 78:         set_clear_sequence ^= tmp_set_clear_sequence;
  2592  021C  084E               	movf	_tmp_set_clear_sequence,w
  2593  021D  00A0               	movwf	??_TMR1_ISR
  2594  021E  0820               	movf	??_TMR1_ISR,w
  2595  021F  06CF               	xorwf	_set_clear_sequence,f
  2596                           
  2597                           ;tmr1_module.c: 79:         tmp_set_clear_sequence = !tmp_set_clear_sequence;
  2598  0220  084E               	movf	_tmp_set_clear_sequence,w
  2599  0221  1D03               	btfss	3,2
  2600  0222  2A25               	goto	u49_20
  2601  0223  3001               	movlw	1
  2602  0224  2A26               	goto	u50_20
  2603  0225                     u49_20:
  2604  0225  3000               	movlw	0
  2605  0226                     u50_20:
  2606  0226  00A0               	movwf	??_TMR1_ISR
  2607  0227  0820               	movf	??_TMR1_ISR,w
  2608  0228  00CE               	movwf	_tmp_set_clear_sequence
  2609                           
  2610                           ;tmr1_module.c: 82:         (*func_ptr[CW_CCW_select][pair_select][set_clear_sequence])(
      +                          );
  2611  0229  0851               	movf	_CW_CCW_select,w
  2612  022A  00A0               	movwf	??_TMR1_ISR
  2613  022B  3002               	movlw	2
  2614  022C                     u51_25:
  2615  022C  1003               	clrc
  2616  022D  0DA0               	rlf	??_TMR1_ISR,f
  2617  022E  3EFF               	addlw	-1
  2618  022F  1D03               	skipz
  2619  0230  2A2C               	goto	u51_25
  2620  0231  3037               	movlw	(low (_func_ptr| 0))& (0+255)
  2621  0232  0720               	addwf	??_TMR1_ISR,w
  2622  0233  00A1               	movwf	??_TMR1_ISR+1
  2623  0234  0850               	movf	_pair_select,w
  2624  0235  00A2               	movwf	??_TMR1_ISR+2
  2625  0236  0722               	addwf	??_TMR1_ISR+2,w
  2626  0237  0721               	addwf	??_TMR1_ISR+1,w
  2627  0238  00A3               	movwf	??_TMR1_ISR+3
  2628  0239  084F               	movf	_set_clear_sequence,w
  2629  023A  0723               	addwf	??_TMR1_ISR+3,w
  2630  023B  00A4               	movwf	??_TMR1_ISR+4
  2631  023C  0824               	movf	??_TMR1_ISR+4,w
  2632  023D  0084               	movwf	4
  2633  023E  1383               	bcf	3,7	;select IRP bank0
  2634  023F  0800               	movf	0,w
  2635  0240  2034               	fcall	i1fptable
  2636                           
  2637                           ;tmr1_module.c: 86:         if (OF_num_TMR1 == target_OF_num) {
  2638  0241  1283               	bcf	3,5	;RP0=0, select bank0
  2639  0242  0844               	movf	_target_OF_num+1,w
  2640  0243  064A               	xorwf	_OF_num_TMR1+1,w
  2641  0244  1D03               	skipz
  2642  0245  2A48               	goto	u52_25
  2643  0246  0843               	movf	_target_OF_num,w
  2644  0247  0649               	xorwf	_OF_num_TMR1,w
  2645  0248                     u52_25:
  2646  0248  1D03               	skipz
  2647  0249  0008               	return
  2648                           
  2649                           ;tmr1_module.c: 87:             TMR1ON = 0;
  2650  024A  1010               	bcf	16,0	;volatile
  2651                           
  2652                           ;tmr1_module.c: 88:             reset_all_pins();
  2653  024B  2391               	fcall	i1_reset_all_pins
  2654  024C  0008               	return
  2655  024D                     __end_of_TMR1_ISR:
  2656                           
  2657                           	psect	text19
  2658  0391                     __ptext19:	
  2659 ;; *************** function i1_reset_all_pins *****************
  2660 ;; Defined at:
  2661 ;;		line 55 in file "coil_control.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		None
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMMON   BANK0
  2675 ;;      Params:         0       0
  2676 ;;      Locals:         0       0
  2677 ;;      Temps:          0       0
  2678 ;;      Totals:         0       0
  2679 ;;Total ram usage:        0 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; This function calls:
  2682 ;;		Nothing
  2683 ;; This function is called by:
  2684 ;;		_TMR1_ISR
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688  0391                     i1_reset_all_pins:	
  2689                           ;psect for function i1_reset_all_pins
  2690                           
  2691                           
  2692                           ;coil_control.c: 56:     GPIO0 = 0;
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in i1_reset_all_pins: []
  2696  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2697  0392  1005               	bcf	5,0	;volatile
  2698                           
  2699                           ;coil_control.c: 57:     GPIO1 = 0;
  2700  0393  1085               	bcf	5,1	;volatile
  2701                           
  2702                           ;coil_control.c: 58:     GPIO2 = 0;
  2703  0394  1105               	bcf	5,2	;volatile
  2704                           
  2705                           ;coil_control.c: 59:     GPIO4 = 0;
  2706  0395  1205               	bcf	5,4	;volatile
  2707  0396  0008               	return
  2708  0397                     __end_ofi1_reset_all_pins:
  2709                           
  2710                           	psect	text20
  2711  03A9                     __ptext20:	
  2712 ;; *************** function _odd_pins_clear_set *****************
  2713 ;; Defined at:
  2714 ;;		line 50 in file "coil_control.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		None
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMMON   BANK0
  2728 ;;      Params:         0       0
  2729 ;;      Locals:         0       0
  2730 ;;      Temps:          0       0
  2731 ;;      Totals:         0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used: 1
  2734 ;; This function calls:
  2735 ;;		Nothing
  2736 ;; This function is called by:
  2737 ;;		_TMR1_ISR
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741  03A9                     _odd_pins_clear_set:	
  2742                           ;psect for function _odd_pins_clear_set
  2743                           
  2744                           
  2745                           ;coil_control.c: 51:     GPIO0 = 0;
  2746                           
  2747                           ;incstack = 0
  2748                           ; Regs used in _odd_pins_clear_set: []
  2749  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  2750  03AA  1005               	bcf	5,0	;volatile
  2751                           
  2752                           ;coil_control.c: 52:     GPIO2 = 1;
  2753  03AB  1505               	bsf	5,2	;volatile
  2754  03AC  0008               	return
  2755  03AD                     __end_of_odd_pins_clear_set:
  2756                           
  2757                           	psect	text21
  2758  03AD                     __ptext21:	
  2759 ;; *************** function _even_pins_clear_set *****************
  2760 ;; Defined at:
  2761 ;;		line 40 in file "coil_control.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;		None
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;		None
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		None
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMMON   BANK0
  2775 ;;      Params:         0       0
  2776 ;;      Locals:         0       0
  2777 ;;      Temps:          0       0
  2778 ;;      Totals:         0       0
  2779 ;;Total ram usage:        0 bytes
  2780 ;; Hardware stack levels used: 1
  2781 ;; This function calls:
  2782 ;;		Nothing
  2783 ;; This function is called by:
  2784 ;;		_TMR1_ISR
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788  03AD                     _even_pins_clear_set:	
  2789                           ;psect for function _even_pins_clear_set
  2790                           
  2791                           
  2792                           ;coil_control.c: 41:     GPIO1 = 0;
  2793                           
  2794                           ;incstack = 0
  2795                           ; Regs used in _even_pins_clear_set: []
  2796  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2797  03AE  1085               	bcf	5,1	;volatile
  2798                           
  2799                           ;coil_control.c: 42:     GPIO4 = 1;
  2800  03AF  1605               	bsf	5,4	;volatile
  2801  03B0  0008               	return
  2802  03B1                     __end_of_even_pins_clear_set:
  2803                           
  2804                           	psect	text22
  2805  03B1                     __ptext22:	
  2806 ;; *************** function _even_pins_set_clear *****************
  2807 ;; Defined at:
  2808 ;;		line 35 in file "coil_control.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;		None
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		None
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMMON   BANK0
  2822 ;;      Params:         0       0
  2823 ;;      Locals:         0       0
  2824 ;;      Temps:          0       0
  2825 ;;      Totals:         0       0
  2826 ;;Total ram usage:        0 bytes
  2827 ;; Hardware stack levels used: 1
  2828 ;; This function calls:
  2829 ;;		Nothing
  2830 ;; This function is called by:
  2831 ;;		_TMR1_ISR
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835  03B1                     _even_pins_set_clear:	
  2836                           ;psect for function _even_pins_set_clear
  2837                           
  2838                           
  2839                           ;coil_control.c: 36:     GPIO1 = 1;
  2840                           
  2841                           ;incstack = 0
  2842                           ; Regs used in _even_pins_set_clear: []
  2843  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  2844  03B2  1485               	bsf	5,1	;volatile
  2845                           
  2846                           ;coil_control.c: 37:     GPIO4 = 0;
  2847  03B3  1205               	bcf	5,4	;volatile
  2848  03B4  0008               	return
  2849  03B5                     __end_of_even_pins_set_clear:
  2850                           
  2851                           	psect	text23
  2852  03B5                     __ptext23:	
  2853 ;; *************** function _odd_pins_set_clear *****************
  2854 ;; Defined at:
  2855 ;;		line 45 in file "coil_control.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		None
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0
  2869 ;;      Params:         0       0
  2870 ;;      Locals:         0       0
  2871 ;;      Temps:          0       0
  2872 ;;      Totals:         0       0
  2873 ;;Total ram usage:        0 bytes
  2874 ;; Hardware stack levels used: 1
  2875 ;; This function calls:
  2876 ;;		Nothing
  2877 ;; This function is called by:
  2878 ;;		_TMR1_ISR
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882  03B5                     _odd_pins_set_clear:	
  2883                           ;psect for function _odd_pins_set_clear
  2884                           
  2885                           
  2886                           ;coil_control.c: 46:     GPIO0 = 1;
  2887                           
  2888                           ;incstack = 0
  2889                           ; Regs used in _odd_pins_set_clear: []
  2890  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  2891  03B6  1405               	bsf	5,0	;volatile
  2892                           
  2893                           ;coil_control.c: 47:     GPIO2 = 0;
  2894  03B7  1105               	bcf	5,2	;volatile
  2895  03B8  0008               	return
  2896  03B9                     __end_of_odd_pins_set_clear:
  2897  000C                     
  2898                           	psect	functab
  2899  0033                     __pfunctab:
  2900  0033                     fptable:
  2901  0033  2833               	goto	fptable	;no entries
  2902  0034                     __i1fptable:
  2903  0034                     i1fptable:
  2904  0034  00DF               	movwf	(btemp+1)& (0+127)
  2905  0035  3000               	movlw	high i1fptable
  2906  0036  008A               	movwf	10
  2907  0037  085F               	movf	(btemp+1)& (0+127),w
  2908  0038  0782               	addwf	2,f
  2909  0039                     i1fpbase:
  2910  0039  2839               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  2911  003A                     fp__odd_pins_set_clear:
  2912  003A  2BB5               	ljmp	_odd_pins_set_clear
  2913  003B                     fp__even_pins_set_clear:
  2914  003B  2BB1               	ljmp	_even_pins_set_clear
  2915  003C                     fp__even_pins_clear_set:
  2916  003C  2BAD               	ljmp	_even_pins_clear_set
  2917  003D                     fp__odd_pins_clear_set:
  2918  003D  2BA9               	ljmp	_odd_pins_clear_set
  2919  003E                     __end_of__i1fptable:
  2920  005E                     btemp	set	94	;btemp
  2921  005E                     wtemp0	set	94
  2922                           
  2923                           	psect	idloc
  2924                           
  2925                           ;Config register IDLOC0 @ 0x2000
  2926                           ;	unspecified, using default values
  2927  2000                     	org	8192
  2928  2000  3FFF               	dw	16383
  2929                           
  2930                           ;Config register IDLOC1 @ 0x2001
  2931                           ;	unspecified, using default values
  2932  2001                     	org	8193
  2933  2001  3FFF               	dw	16383
  2934                           
  2935                           ;Config register IDLOC2 @ 0x2002
  2936                           ;	unspecified, using default values
  2937  2002                     	org	8194
  2938  2002  3FFF               	dw	16383
  2939                           
  2940                           ;Config register IDLOC3 @ 0x2003
  2941                           ;	unspecified, using default values
  2942  2003                     	org	8195
  2943  2003  3FFF               	dw	16383
  2944                           
  2945                           	psect	config
  2946                           
  2947                           ;Config register CONFIG @ 0x2007
  2948                           ;	Oscillator Selection bits
  2949                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  2950                           ;	Watchdog Timer Enable bit
  2951                           ;	WDTE = OFF, WDT disabled
  2952                           ;	Power-Up Timer Enable bit
  2953                           ;	PWRTE = ON, PWRT enabled
  2954                           ;	GP3/MCLR pin function select
  2955                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
  2956                           ;	Brown-out Detect Enable bit
  2957                           ;	BOREN = ON, BOD enabled
  2958                           ;	Code Protection bit
  2959                           ;	CP = OFF, Program Memory code protection is disabled
  2960                           ;	Data Code Protection bit
  2961                           ;	CPD = OFF, Data memory code protection is disabled
  2962  2007                     	org	8199
  2963  2007  31C4               	dw	12740

Data Sizes:
    Strings     51
    Constant    0
    Data        14
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     23      50

Pointer List with Targets:

    soft_uart_send_string@string	PTR unsigned char  size(1) Largest target is 19
		 -> STR_6(CODE[2]), STR_5(CODE[19]), STR_4(CODE[2]), STR_3(CODE[16]), 
		 -> STR_2(CODE[2]), STR_1(CODE[14]), 

    func_ptr	PTR FTN()void [2][2][2] size(1) Largest target is 1
		 -> odd_pins_clear_set(), odd_pins_set_clear(), even_pins_clear_set(), even_pins_set_clear(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_soft_uart_send_ALL
    _start_timer->_update_current_position
    _soft_uart_send_ALL->_divu10
    _soft_uart_send_string->_soft_uart_send_uint8_t

Critical Paths under _ISR in BANK0

    _ISR->_TMR1_ISR

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3053
                                             20 BANK0      3     3      0
                          _TMR1_init
                         _adc_deinit
                          _coil_init
                  _comparator_deinit
                     _interrupt_init
                     _reset_all_pins
          _retrieve_current_position
                     _soft_uart_init
                 _soft_uart_send_ALL
                        _start_timer
 ---------------------------------------------------------------------------------
 (1) _start_timer                                          1     1      0     174
                                             11 BANK0      1     1      0
            _update_current_position
 ---------------------------------------------------------------------------------
 (2) _update_current_position                              2     0      2     174
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _soft_uart_send_ALL                                   1     1      0    2879
                                             19 BANK0      1     1      0
                            ___awmod
                             _divu10
                         _intToASCII
              _soft_uart_send_string
             _soft_uart_send_uint8_t
 ---------------------------------------------------------------------------------
 (2) _soft_uart_send_string                                3     3      0     378
                                             12 BANK0      3     3      0
             _soft_uart_send_uint8_t
 ---------------------------------------------------------------------------------
 (2) _soft_uart_send_uint8_t                               3     3      0      90
                                              9 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _intToASCII                                           1     1      0      22
                                              9 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _divu10                                              10     8      2     725
                                              9 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1664
                                              9 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _soft_uart_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _retrieve_current_position                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reset_all_pins                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _comparator_deinit                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _coil_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_deinit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  4     4      0       0
                                              5 BANK0      4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             5     5      0       0
                                              0 BANK0      5     5      0
                _even_pins_clear_set *
                _even_pins_set_clear *
                 _odd_pins_clear_set *
                 _odd_pins_set_clear *
                   i1_reset_all_pins
 ---------------------------------------------------------------------------------
 (6) i1_reset_all_pins                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _odd_pins_set_clear                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _odd_pins_clear_set                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _even_pins_set_clear                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _even_pins_clear_set                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TMR1_init
   _adc_deinit
   _coil_init
   _comparator_deinit
   _interrupt_init
   _reset_all_pins
   _retrieve_current_position
   _soft_uart_init
   _soft_uart_send_ALL
     ___awmod
     _divu10
     _intToASCII
     _soft_uart_send_string
       _soft_uart_send_uint8_t
     _soft_uart_send_uint8_t
   _start_timer
     _update_current_position

 _ISR (ROOT)
   _TMR1_ISR
     _even_pins_clear_set *
     _even_pins_set_clear *
     _odd_pins_clear_set *
     _odd_pins_set_clear *
     i1_reset_all_pins *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E     17      32       4       80.6%
BITBANK0            3E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      32       6        0.0%
ABS                  0      0      32       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Jun 22 02:33:34 2023

                                pc 0002                        _OF_num_TMR1 0049  
                               fsr 0004             __end_of_interrupt_init 038B  
                              _GIE 005F                                u330 01B4  
                              u340 01B5                                u325 0160  
                              u415 01E8                                u425 01F1  
                              u290 0267                                u284 025F  
                              _ISR 0341                                u285 025D  
                              u607 0284                                u465 02B5  
                              u395 01D7                                u557 030C  
                              u567 0326                                _PSA 040B  
                              u577 0252                                u587 026B  
                              u597 027C                                fsr0 0004  
                              indf 0000                        _start_timer 028A  
                     ___awmod@sign 002F             __end_of_soft_uart_init 03A1  
               _odd_pins_clear_set 03A9                               ?_ISR 0020  
                             l1301 01E2                               l1313 0203  
                             l1305 01F0                               l1243 0259  
                             l1309 01FB                               l1245 0269  
                             l1421 02C1                               l1413 02A1  
                             l1291 01CE                               l1275 032F  
                             l1419 02BC                               l1287 01C7  
                             l1463 0320                               l1457 0314  
                             l1299 01D4                               _ADON 00F8  
                             STR_1 02EE                               STR_2 02FC  
                             STR_3 02DE                               STR_4 02FC  
                             STR_5 02CB                               STR_6 02FC  
                             _T0CS 040D                               _PEIE 005E  
                             _TMR1 000E                ?_odd_pins_clear_set 0020  
                             _main 02FE                               btemp 005E  
                             start 000F                _even_pins_clear_set 03AD  
                            ??_ISR 0025               ??_odd_pins_clear_set 0000  
  __end_of_update_current_position 037F                              ?_main 0020  
                  __end_of___awmod 0208                    ?_interrupt_init 0020  
                            _GPIO0 0028                              _GPIO1 0029  
                            _GPIO2 002A                              _GPIO3 002B  
                            _GPIO4 002C                              _GPIO5 002D  
                            i1l395 0346               ?_even_pins_clear_set 0020  
                            u50_20 0226                              u51_25 022C  
                            u52_25 0248                              u47_20 0218  
                            u48_20 0219                              u49_20 0225  
               _odd_pins_set_clear 03B5                   __end_of_TMR1_ISR 024D  
                  ?_soft_uart_init 0020             ?_soft_uart_send_string 0020  
                            fpbase 0000                              pclath 000A  
              ?_odd_pins_set_clear 0020                              status 0003  
                            wtemp0 005E                _even_pins_set_clear 03B1  
                  __initialization 0010                       __end_of_main 032C  
             ??_odd_pins_set_clear 0000                             ??_main 0034  
            ??_even_pins_clear_set 0000               ?_even_pins_set_clear 0020  
      ??_retrieve_current_position 0000                         __i1fptable 0034  
                           _TMR0IE 005D                             _TMR1GE 0086  
                           _TMR1IE 0460                             _TMR1IF 0060  
                           _TMR1CS 0081                             _TMR1ON 0080  
           soft_uart_send_string@i 002D                      _CW_CCW_select 0051  
                        ??___awmod 002D            ?_soft_uart_send_uint8_t 0020  
                           _divu10 0141                  __end_of_TMR1_init 036A  
                  ___awmod@divisor 0029                    ___awmod@counter 002E  
            ??_even_pins_set_clear 0000                  ?i1_reset_all_pins 0020  
                           fptable 0033                             fptotal 0000  
                           saved_w 005E                 ??i1_reset_all_pins 0000  
          __end_of__initialization 0031     __end_of_soft_uart_send_uint8_t 028A  
                   __pcstackCOMMON 0000                         _adc_deinit 038B  
                     __pidataBANK0 0350                          ?_TMR1_ISR 0020  
        _retrieve_current_position 03A1                       ?_start_timer 0020  
                       __pbssBANK0 0045         __end_of_soft_uart_send_ALL 0141  
                       __pmaintext 02FE                   ??_interrupt_init 0000  
                       ??_TMR1_ISR 0020                            ?_divu10 0029  
                       __pintentry 0004                   ??_soft_uart_init 0000  
                          _T1OSCEN 0083            ??_soft_uart_send_string 002C  
          soft_uart_send_uint8_t@i 002B           ?_update_current_position 0029  
                          _TRISIO0 0428                            _TRISIO1 0429  
                          _TRISIO2 042A                            _TRISIO3 042B  
                          _TRISIO4 042C                            _TRISIO5 042D  
                       __stringtab 02C5                            i1fpbase 0039  
                       _intToASCII 0397                  __end_of_coil_init 0379  
                      ?_adc_deinit 0020                            ___awmod 01BC  
                        _CMCONbits 0019                          _ANSELbits 009F  
                          __ptext1 028A                            __ptext2 0379  
                          __ptext3 003E                            __ptext4 032C  
                          __ptext5 024D                            __ptext6 0397  
                          __ptext7 0141                            __ptext8 01BC  
                          __ptext9 039C                __size_of__i1fptable 000A  
                        _T1CONbits 0010                     _reset_all_pins 037F  
                 ___awmod@dividend 002B                            divu10@n 0029  
                          divu10@q 0031                            divu10@r 002F  
                          clrloop0 036B               end_of_initialization 0031  
               _set_clear_sequence 004F        soft_uart_send_uint8_t@value 002A  
      __end_of_even_pins_clear_set 03B1                         _temp_value 0045  
           __end_of_reset_all_pins 0385                          _TMR1_init 035E  
                      ?_intToASCII 0020                   _current_position 0047  
      __end_of_even_pins_set_clear 03B5                     __end_of_divu10 01BC  
                  ?_reset_all_pins 0020                         ?_TMR1_init 0020  
                    intToASCII@num 0029                start_initialization 0010  
                      __end_of_ISR 0350  __end_of_retrieve_current_position 03A5  
                         ??_divu10 002B                        __pdataBANK0 0037  
               _soft_uart_send_ALL 003E                 __end_of__i1fptable 003E  
                        ___latbits 0000                      __pcstackBANK0 0020  
              ?_soft_uart_send_ALL 0020      __end_of_soft_uart_send_string 0341  
             ??_soft_uart_send_ALL 0033                      _target_OF_num 0043  
                     ??_adc_deinit 0000                          __pfunctab 0033  
                         ?___awmod 0029                          _coil_init 0372  
                        __pstrings 02C5                        ??_TMR1_init 0000  
               __end_of_adc_deinit 0391                  interrupt_function 0004  
         ??_soft_uart_send_uint8_t 0029                   i1_reset_all_pins 0391  
                        clear_ram0 036A                           _TMR1_ISR 0208  
       __end_of_odd_pins_clear_set 03AD                          _num_steps 003F  
                       ?_coil_init 0020                        __stringbase 02CA  
           fp__even_pins_clear_set 003C                           i1fptable 0034  
                         i1fptotal 000C                        _first_digit 004B  
                     _second_digit 004C                       ??_intToASCII 0000  
                 ??_reset_all_pins 0000         __end_of_odd_pins_set_clear 03B9  
               __end_of__stringtab 02CB       update_current_position@value 0029  
                    ??_start_timer 002B             fp__even_pins_set_clear 003B  
               __end_of_intToASCII 039C                        _pair_select 0050  
                         __ptext10 03A1                           __ptext11 037F  
                         __ptext20 03A9                           __ptext12 0385  
                         __ptext21 03AD                           __ptext13 03A5  
                         __ptext22 03B1                           __ptext14 0372  
                         __ptext23 03B5                           __ptext15 038B  
                         __ptext16 035E                           __ptext17 0341  
                         __ptext18 0208                           __ptext19 0391  
           _tmp_set_clear_sequence 004E                           _func_ptr 0037  
          _update_current_position 0379                  _comparator_deinit 03A5  
                      ??_coil_init 0000              fp__odd_pins_clear_set 003D  
      soft_uart_send_string@string 002E                 ?_comparator_deinit 0020  
              ??_comparator_deinit 0000                __end_of_start_timer 02C5  
                         intlevel1 0033         ?_retrieve_current_position 0020  
                        stringcode 02C5          __end_of_comparator_deinit 03A9  
            fp__odd_pins_set_clear 003A             _soft_uart_send_uint8_t 024D  
         __end_ofi1_reset_all_pins 0397                        _third_digit 004D  
                   _interrupt_init 0385                           stringdir 02C5  
                         stringtab 02C5                     _soft_uart_init 039C  
            _soft_uart_send_string 032C          ??_update_current_position 0000  
